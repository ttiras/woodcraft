{"version":3,"sources":["../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/useQuery.ts","../../src/useLazyQuery.ts","../../src/data/MutationData.ts","../../src/useMutation.ts","../../src/data/SubscriptionData.ts","../../src/useSubscription.ts","../../src/ssr/RenderPromises.ts","wrappers/breadcrumb/Breadcrumb.js","graphql/InsertMessage.js","pages/other/Contact.js"],"names":["options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","length","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","OperationData","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","QueryData","Promise","resolve","then","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","useLazyQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","MutationData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","useSubscription","subscriptionDataRef","SubscriptionData","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","Breadcrumb","className","separator","item","NavLink","finalItem","INSERT_MESSAGE","gql","Contact","location","useForm","handleSubmit","register","useState","messageSent","setMessageSent","pathname","insertMessage","Helmet","name","content","to","process","LayoutOne","headerTop","href","onSubmit","values","e","message","email","subject","target","reset","placeholder","required","pattern","role","maxLength","defaultValue"],"mappings":"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","file":"static/js/31.8c36d430.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Breadcrumbs } from \"react-breadcrumbs-dynamic\";\r\n\r\nconst Breadcrumb = () => {\r\n  return (\r\n    <div className=\"breadcrumb-area pt-35 pb-35 bg-gray-3\">\r\n      <div className=\"container\">\r\n        <div className=\"breadcrumb-content text-center\">\r\n          <Breadcrumbs\r\n            separator={<span>/</span>}\r\n            item={NavLink}\r\n            finalItem={\"span\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import gql from \"graphql-tag\";\n\nconst INSERT_MESSAGE = gql`\n  mutation AddMessage($message: [messages_insert_input!]!) {\n    insert_messages(objects: $message)\n    {\n      affected_rows\n    }\n  }\n`; \n\nexport default INSERT_MESSAGE\n\n","import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\nimport LayoutOne from \"../../layouts/LayoutOne\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\n\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport INSERT_MESSAGE from \"../../graphql/InsertMessage\";\r\n\r\nconst Contact = ({ location }) => {\r\n  const { handleSubmit, register, errors } = useForm();\r\n  const [messageSent, setMessageSent] = useState(false);\r\n  const { pathname } = location;\r\n  const [insertMessage] = useMutation(INSERT_MESSAGE, {\r\n    onCompleted(data) {\r\n      setMessageSent(true);\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values, e) => {\r\n    insertMessage({\r\n      variables: {\r\n        message: {\r\n          name: values.name,\r\n          email: values.email,\r\n          subject: values.subject,\r\n          message: values.message,\r\n        },\r\n      },\r\n    });\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Helmet>\r\n        <title>Micota. | İletişim</title>\r\n        <meta\r\n          name='description'\r\n          content='Alışveriş sitemiz micota.com.tr iletişim bilgilerine bu sayfada ulaşabilirsiniz. Sunum tepsisi, kahve çay sunumu, ahşap yuvarlak tepsi ve supla, mini coffee table.'\r\n        />\r\n      </Helmet>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>\r\n        Anasayfa\r\n      </BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        İletişim\r\n      </BreadcrumbsItem>\r\n      <LayoutOne headerTop='visible'>\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className='contact-area pt-100 pb-100'>\r\n          <div className='container'>\r\n            <div className='custom-row-2'>\r\n              <div className='col-lg-4 col-md-5'>\r\n                <div className='contact-info-wrap'>\r\n                  <div className='single-contact-info'>\r\n                    <div className='contact-icon'>\r\n                      <i className='fa fa-phone' />\r\n                    </div>\r\n                    <div className='contact-info-dec'>\r\n                      <p>0216 693 13 50</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className='single-contact-info'>\r\n                    <div className='contact-icon'>\r\n                      <i className='fa fa-globe' />\r\n                    </div>\r\n                    <div className='contact-info-dec'>\r\n                      <p>\r\n                        <a href='mailto:hello@micota.com.tr'>hello@micota.com.tr</a>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className='single-contact-info'>\r\n                    <div className='contact-icon'>\r\n                      <i className='fa fa-map-marker' />\r\n                    </div>\r\n                    <div className='contact-info-dec'>\r\n                      <p>Küçüksu Mah. Asma Sok. No: 10</p>\r\n                      <p>Kandilli Üsküdar</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className='single-contact-info'>\r\n                    <div className='contact-icon'>\r\n                      <i className='fa fa-whatsapp' />\r\n                    </div>\r\n                    <div className='contact-info-dec'>\r\n                      <p>\r\n                        <a href='https://wa.me/905302225663'>Whatsapp İletişim</a>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className='contact-social text-center'>\r\n                    <h3>Takip et</h3>\r\n                    <ul>\r\n                      <li>\r\n                        <a href='//facebook.com'>\r\n                          <i className='fa fa-facebook' />\r\n                        </a>\r\n                      </li>\r\n                      <li>\r\n                        <a href='//www.instagram.com/micotastore'>\r\n                          <i className='fa fa-instagram' />\r\n                        </a>\r\n                      </li>\r\n                      <li>\r\n                        <a href='//youtube.com'>\r\n                          <i className='fa fa-youtube' />\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='col-lg-8 col-md-7'>\r\n                <div className='contact-form'>\r\n                  <div className='contact-title mb-30'>\r\n                    <h2>Mesaj gönder</h2>\r\n                  </div>\r\n                  <form\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    className='contact-form-style'\r\n                  >\r\n                    <div className='row'>\r\n                      <div className='col-lg-6'>\r\n                        <input\r\n                          name='name'\r\n                          placeholder='İsim*'\r\n                          type='text'\r\n                          ref={register({\r\n                            required: \"İsim boş bırakılamaz.\",\r\n                            pattern: {\r\n                              value: /^[a-zA-ZğüşöçıİĞÜŞÖÇ ]+$/,\r\n                              message: \"İsim sadece harflerden oluşur. \",\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors.name && (\r\n                          <div\r\n                            className='alert alert-danger small'\r\n                            role='alert'\r\n                          >\r\n                            {errors.name.message}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className='col-lg-6'>\r\n                        <input\r\n                          name='email'\r\n                          placeholder='Email*'\r\n                          type='email'\r\n                          ref={register({\r\n                            required: \"Email boş bırakılamaz \",\r\n                            pattern: {\r\n                              value: /^\\s*[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\s*$/i,\r\n                              message: \"Geçerli bir email girin.\",\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors.email && (\r\n                          <div\r\n                            className='alert alert-danger small'\r\n                            role='alert'\r\n                          >\r\n                            {errors.email.message}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className='col-lg-12'>\r\n                        <input\r\n                          name='subject'\r\n                          placeholder='Konu*'\r\n                          type='text'\r\n                          ref={register({\r\n                            required: \"Konu boş bırakılamaz.\",\r\n                            pattern: {\r\n                              value: /^[a-zA-ZğüşöçıİĞÜŞÖÇ0-9._%+-,;:?()&$@  ]+$/,\r\n                              message: \"Geçersiz karakterleri siliniz. \",\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors.subject && (\r\n                          <div\r\n                            className='alert alert-danger small'\r\n                            role='alert'\r\n                          >\r\n                            {errors.subject.message}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className='col-lg-12'>\r\n                        <textarea\r\n                          maxLength='256'\r\n                          name='message'\r\n                          placeholder='Mesaj*'\r\n                          defaultValue={\"\"}\r\n                          ref={register({\r\n                            required: \"Mesaj boş bırakılamaz.\",\r\n                            pattern: {\r\n                              value: /^[a-zA-ZğüşöçıİĞÜŞÖÇ0-9._%+-,;:?()&$@ ]+$/,\r\n                              message: \"Geçersiz karakterleri siliniz. \",\r\n                            },\r\n                          })}\r\n                        />\r\n                        {errors.message && (\r\n                          <div\r\n                            className='alert alert-danger small'\r\n                            role='alert'\r\n                          >\r\n                            {errors.message.message}\r\n                          </div>\r\n                        )}\r\n                        <button className='submit' type='submit'>\r\n                          GÖNDER\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                  {messageSent && (\r\n                    <div\r\n                      className='alert alert-success text-center'\r\n                      role='alert'\r\n                    >\r\n                      Mesajınız bize ulaştı\r\n                      <i className='fa fa-smile-o mb-3'></i> En kısa sürede\r\n                      email adresinize cevap göndereceğiz.\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </LayoutOne>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  location: PropTypes.object,\r\n};\r\n\r\nexport default Contact;\r\n"],"sourceRoot":""}