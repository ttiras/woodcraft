{"version":3,"sources":["wrappers/breadcrumb/Breadcrumb.js","pages/memberZone/UserAddresses.js","graphql/GetUserOrders.js","pages/memberZone/UserOrders.js","pages/memberZone/MyAccount.js"],"names":["Breadcrumb","className","separator","item","NavLink","finalItem","EditAddresses","addresses","map","address","key","street","city","town","GET_USER_ORDERS","gql","UserOrders","orders","order","id","order_items","product","to","name","qty","ProductImgFallback","path","image","amount","isinvoiceAddress","surname","toUpperCase","isPaid","isShipped","isCancelled","isGift","notes","MyAccount","location","pathname","state","useAuthState","useLazyQuery","getOrders","loading","error","data","useEffect","user","variables","user_id","uid","process","LayoutOne","headerTop","Accordion","Card","Header","Toggle","variant","eventKey","Collapse","Body","length"],"mappings":"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","file":"static/js/27.7a6a70f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Breadcrumbs } from \"react-breadcrumbs-dynamic\";\r\n\r\nconst Breadcrumb = () => {\r\n  return (\r\n    <div className=\"breadcrumb-area pt-35 pb-35 bg-gray-3\">\r\n      <div className=\"container\">\r\n        <div className=\"breadcrumb-content text-center\">\r\n          <Breadcrumbs\r\n            separator={<span>/</span>}\r\n            item={NavLink}\r\n            finalItem={\"span\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React from 'react'\nimport './UserOrders.css'\n\nexport default function EditAddresses ({addresses}){\n\n    return(\n        <div className='myaccount-info-wrapper'>\n                            \n                            <div className='entries-wrapper'>\n                              {addresses && addresses.map(address=>(\n                                  <div className='row' key='address.id'>\n                                  <div className='col-lg-6 col-md-6 d-flex align-items-center justify-content-center'>\n                                    <div className='entries-info text-center'>\n                                      <p>{address.street}</p>\n                                      <p>{address.city} </p>\n                                      <p> {address.town} </p>\n                                    </div>\n                                  </div>\n                                  <div className='col-lg-6 col-md-6 d-flex align-items-center justify-content-center'>\n                                    <div className='entries-edit-delete text-center'>\n                                      <button className='active edit-btn'>Düzenle</button>\n                                      <button className='active order-btn'>Sil</button>\n                                    </div>\n                                  </div>\n                                </div>\n                                )\n                              )\n                              }\n                            </div>\n                            \n                          </div>\n    )\n}","import gql from \"graphql-tag\";\n\nconst GET_USER_ORDERS = gql`\n\nquery SingleOrder ($user_id: String!) {\n orders(where: {user_id: {_eq: $user_id}}) {\n    amount\n    created\n    isGift\n    id\n    isCancelled\n    isPaid\n    isShipped\n    notes\n    status\n    updated_at\n    addresses {\n      id\n      city\n      isinvoiceAddress\n      name\n      surname\n      street\n      town\n    }\n    order_items {\n      product {\n        fullDescription\n        id\n        name\n        price\n        discount\n        stock\n        rating\n        shortDescription\n        image {\n          path\n        }\n      }\n      qty\n    }\n    user_ordered {\n      email\n      id\n      name\n      surname\n      phone\n    }\n}}\n`;\nexport default GET_USER_ORDERS","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport ProductImgFallback from \"../../helpers/ProductImgFallback\";\n\nimport './UserOrders.css'\n\nexport default function UserOrders ({orders}){\n   return (\n        <div className='shop-list-wrap mb-30'>\n      {orders &&\n        orders.map((order) => (\n          <div className='row orders p-2' key={order.id}>\n            <div className='col-xl-4 col-md-5 col-sm-6'>\n              <div className='product-list-image-wrap d-flex overflow-auto'>\n                {order.order_items.map((item) => (\n                  <div className='container' key={item.product.id}>\n                    <Link\n                      to={\n                        process.env.PUBLIC_URL + \"/product/\" + item.product.id\n                      }\n                    >\n                      <span className=\"badge badge-secondary productName\">{item.product.name}</span>\n                      <span className=\"badge badge-secondary productName2\">Adet: {item.qty}</span>\n                      <ProductImgFallback\n                        path={item.product.image[0].path}\n                        className=\"img-orders img-responsive\"\n                        name={item.product.name}\n                      />\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className='col-xl-8 col-md-7 col-sm-6'>\n              <div className='shop-list-content'>\n  \n                  \n                    <h4>\n                      <strong>Sipariş ID: </strong>\n                      {order.id}\n                    </h4>\n\n                <div className='product-list-price m-0'>\n                  <span>{order.amount} TL </span>\n                </div>\n                <div className='rating-review d-block'>\n                  {order.addresses.map((address) => (\n                    <div\n                      className='product-list-rating d-flex border-bottom mb-2'\n                      key={address.id}\n                    >\n                      <div>\n                        {address.isinvoiceAddress ? (\n                          <h4>\n                            <strong>Fatura Adresi: </strong>\n                          </h4>\n                        ) : (\n                          <h4>\n                            <strong>Teslimat Adresi: </strong>\n                          </h4>\n                        )}\n                      </div>\n                      <div>\n                        <span>\n                          {address.name&& address.surname&& \" \" +\n                            address.name.toUpperCase() +\n                            \" \" +\n                            address.surname.toUpperCase() +\n                            \" \"}\n                        </span>\n                        <span>\n                          {\" \" +\n                            address.street +\n                            \" \" +\n                            address.town.toUpperCase() +\n                            \" \" +\n                            address.city.toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                  <div className='row border-bottom mb-3'>\n                  <div className='col-xl-4 col-md-4 col-sm-4'>\n                      {order.isPaid ? (\n                        <strong><span className='redPaid'>{order.amount} TL</span> ÖDENDİ</strong>\n                      ) : (\n                        <strong>ÖDENMEDİ</strong>\n                      )}{\" \"}\n                      |{\" \"}\n                      {order.isShipped ? (\n                        <strong>KARGOLANDI</strong>\n                      ) : (\n                        <strong>KARGOLANMADI</strong>\n                      )}{\" \"}\n                      | {order.isCancelled && <strong>İPTAL EDİLDİ</strong>}\n                    </div>\n                    <div className='col-xl-2 col-md-2 col-sm-2'>\n                      {order.isGift && (\n                        <strong className='gift'>HEDİYE PAKETİ </strong>\n                      )}\n                    </div>\n                    <div className='col-xl-4 col-md-4 col-sm-4'>\n                      {order.notes && (\n                        <h5>\n                          <strong>NOTLAR: </strong> {order.notes}\n                        </h5>\n                      )}\n                    </div>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n       \n    </div>\n    )\n}","import PropTypes from \"prop-types\";\r\nimport React, { useEffect, Fragment } from \"react\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { useAuthState } from \"../../auth/auth-context\";\r\n\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport LayoutOne from \"../../layouts/LayoutOne\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport UserAddresses from \"./UserAddresses\";\r\nimport GET_USER_ORDERS from \"../../graphql/GetUserOrders\";\r\nimport UserOrders from \"./UserOrders\";\r\n\r\nimport \"./UserOrders.css\";\r\n\r\nconst MyAccount = ({ location }) => {\r\n  const { pathname } = \"Hesabım\";\r\n  const state = useAuthState();\r\n  const [getOrders, { loading, error, data }] = useLazyQuery(GET_USER_ORDERS);\r\n\r\n  useEffect(() => {\r\n    if (state.user) {\r\n      getOrders({\r\n        variables: {\r\n          user_id: state.user.uid,\r\n        },\r\n      });\r\n    }\r\n  }, [state.user, getOrders]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>\r\n        Anasayfa\r\n      </BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        Hesabım\r\n      </BreadcrumbsItem>\r\n      <LayoutOne headerTop='visible'>\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className='myaccount-area pb-80 pt-100'>\r\n          <div className='container'>\r\n            <div className='row'>\r\n              <div className='ml-auto mr-auto col-lg-9'>\r\n                <div className='myaccount-wrapper'>\r\n                  <Accordion>\r\n                    <Card className='single-my-account mb-20'>\r\n                      <Card.Header className='panel-heading'>\r\n                        <Accordion.Toggle variant='link' eventKey='0'>\r\n                          <h3 className='panel-title'>\r\n                            <span>1 .</span> Siparişlerim{\" \"}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey='0'>\r\n                        <Card.Body>\r\n                          {error &&\r\n                            \"Siparişlere ulaşamadık. Sunucu ya da bağlantı hatası olmuş olabilir, daha sonra tekrar deneyin.\"}\r\n                          {loading && \"Siparişler yükleniyor...\"}\r\n                          {data && <UserOrders orders={data.orders} />}\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className='single-my-account mb-20'>\r\n                      <Card.Header className='panel-heading'>\r\n                        <Accordion.Toggle variant='link' eventKey='1'>\r\n                          <h3 className='panel-title'>\r\n                            <span>2 .</span> Adreslerim\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey='1'>\r\n                        <Card.Body>\r\n                          {data && data.orders && data.orders.length > 0 && (\r\n                            <UserAddresses\r\n                              addresses={data.orders[0].addresses}\r\n                            />\r\n                          )}\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                  </Accordion>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </LayoutOne>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nMyAccount.propTypes = {\r\n  location: PropTypes.object,\r\n};\r\n\r\nexport default MyAccount;\r\n"],"sourceRoot":""}