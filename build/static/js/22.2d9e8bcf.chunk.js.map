{"version":3,"sources":["../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/useQuery.ts","../../src/useLazyQuery.ts","../../src/data/MutationData.ts","../../src/useMutation.ts","../../src/data/SubscriptionData.ts","../../src/useSubscription.ts","../../src/ssr/RenderPromises.ts","helpers/social-auth.js","graphql/GetCities.js","graphql/GetTowns.js","pages/other/InvoiceModal.js","graphql/InsertOrder.js","pages/other/ContractModal.js","pages/other/DistanceModal.js","pages/other/Checkout.js"],"names":["options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","length","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","OperationData","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","QueryData","Promise","resolve","then","memoFn","key","ref","value","useDeepMemo","queryResult","useQuery","useLazyQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","MutationData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","useSubscription","subscriptionDataRef","SubscriptionData","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info","providerG","firebase","auth","GoogleAuthProvider","providerF","FacebookAuthProvider","providerT","TwitterAuthProvider","anonymousLogin","a","fire","signInAnonymously","user","axios","post","err","socialLogin","provider","signInWithPopup","code","message","email","credential","GET_CITIES","gql","GET_TOWNS","InvoiceModal","useState","city","setCity","city_query_error","city_query_data","town_query_error","town_query_data","useForm","handleSubmit","register","dispatch","useAuthDispatch","state","useAuthState","addressType","onHide","invoiceType","setInvoiceType","Modal","show","className","Header","closeButton","name","checked","onChange","htmlFor","onSubmit","payload","disabled","required","pattern","defaultValue","address","invoiceAddress","role","surname","maxLength","identity","firm","vergid","vergin","e","target","il","cities","map","id","il√ße","towns","town","placeholder","minLength","street","phone","INSERT_ORDER","ContractModal","cartItems","cartTotalPrice","today","Date","cartItem","discountedPrice","getDiscountPrice","price","discount","finalProductPrice","toFixed","finalDiscountedPrice","quantity","selectedProductColor","selectedProductSize","toLocaleString","DistanceModal","connect","cartData","location","setLoading","setAddressType","invoiceAddressChecked","setInvoiceAddressChecked","contractSigned","setContractSigned","setError","modalShow","setModalShow","contractModalShow","setContractModalShow","distanceModalShow","setDistanceModalShow","history","useHistory","ordersData","window","open","OrderAction","paymentPageUrl","insertOrder","ordersLoading","ordersError","useEffect","localStorage","getItem","parse","setItem","handleModal","preventDefault","handleSignin","LayoutOne","headerTop","onClick","notes","isGift","addresses","isinvoiceAddress","user_ordered","isAnonymous","order_items","item","product_id","qty","data-toggle","data-placement","title","aria-hidden","to"],"mappings":"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","file":"static/js/22.2d9e8bcf.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n","import firebase from \"firebase/app\";\nimport fire from \"./../auth/firebase\";\nimport axios from \"axios\";\n\nconst providerG = new firebase.auth.GoogleAuthProvider();\nconst providerF = new firebase.auth.FacebookAuthProvider();\nconst providerT = new firebase.auth.TwitterAuthProvider();\n\nexport const anonymousLogin = async () => {\n  await fire\n    .auth()\n    .signInAnonymously()\n    .then(function (result) {\n      const user = result.user;\n      axios\n        .post(\"https://backend.rover.micota.com.tr/claims\", { user })\n        .then(() => {\n          return;\n        })\n        .catch((err) => {\n          return err;\n        });\n    });\n};\n\nexport const socialLogin = (value) => {\n  let provider;\n  if (value === \"t\") provider = providerT;\n  if (value === \"g\") provider = providerG;\n  if (value === \"f\") provider = providerF;\n\n  fire\n    .auth()\n    .signInWithPopup(provider)\n    .then(async function (result) {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // The signed-in user info.\n      const user = result.user;\n      await axios.post(\"https://backend.rover.micota.com.tr/claims\", { user });\n    })\n    .catch(function (error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      const credential = error.credential;\n      return (errorCode, errorMessage, email, credential);\n    });\n};\n","import gql from \"graphql-tag\";\n\nconst GET_CITIES = gql`\n  query GetCities {\n    cities {\n      city\n      id\n    }\n  }\n`;\n\nexport default GET_CITIES;\n","import gql from \"graphql-tag\";\n\nconst GET_TOWNS = gql`\n  query GetTowns($city: String!) {\n    towns(where: { city: { _eq: $city } }, order_by: { town: asc }) {\n      town\n      id\n    }\n  }\n`;\n\nexport default GET_TOWNS;\n","import React, { Fragment, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuthDispatch, useAuthState } from \"../../auth/auth-context\";\nimport GET_CITIES from \"../../graphql/GetCities\";\nimport GET_TOWNS from \"../../graphql/GetTowns\";\n\nimport \"./Checkout.css\";\n\nfunction InvoiceModal(props) {\n  const [city, setCity] = useState(\"Adana\");\n  const { error: city_query_error, data: city_query_data } = useQuery(\n    GET_CITIES\n  );\n  const { error: town_query_error, data: town_query_data } = useQuery(\n    GET_TOWNS,\n    {\n      variables: { city: city },\n    }\n  );\n  const { handleSubmit, register, errors } = useForm();\n  const dispatch = useAuthDispatch();\n  const state = useAuthState();\n\n  const { addressType } = props;\n  const { onHide } = props;\n  \n\n  const [invoiceType, setInvoiceType] = useState(\"bireysel\");\n\n  const onSubmit = (data) => {\n    if (addressType === \"shipping\") {\n      dispatch({\n        type: \"ADDRESS\",\n        payload: data,\n      });\n    } else if (addressType === \"invoice\") {\n      dispatch({\n        type: \"INVOICE_ADDRESS\",\n        payload: data,\n      });\n    }\n    onHide();\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        show={props.show}\n        onHide={props.onHide}\n        className='product-quickview-modal-wrapper'\n      >\n        <Modal.Header closeButton> <div className='col-lg-3 col-md-3'>\n              {addressType === 'shipping' ? <h3>Teslimat Adresi</h3> : <h3>Fatura Adresi</h3>}\n            </div>\n            <div className='col-lg-3 col-md-3'>\n              <div className='form-check form-check-inline'>\n                <input\n                  type='radio'\n                  name='bireysel'\n                  className='checks'\n                  value='bireysel'\n                  checked={invoiceType === \"bireysel\"}\n                  onChange={() => setInvoiceType(\"bireysel\")}\n                />\n                <label className='form-check-label' htmlFor='inlineCheckbox1'>\n                  <strong>Bireysel</strong>\n                </label>\n              </div>\n              <div className='form-check form-check-inline mb-10'>\n                <input\n                  type='radio'\n                  name='kurumsal'\n                  className='checks'\n                  value='kurumsal'\n                  checked={invoiceType === \"kurumsal\"}\n                  onChange={() => setInvoiceType(\"kurumsal\")}\n                />\n                <label className='form-check-label' htmlFor='inlineCheckbox2'>\n                  <strong>Kurumsal</strong>\n                </label>\n              </div>\n            </div></Modal.Header>\n\n        <div className='billing-info-wrap m-4'>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            {state.user&&\n              <div className='row'>\n              {addressType === 'invoice' && invoiceType === 'kurumsal' ? null :\n              <div className='col-lg-6 col-md-6 d-flex'>\n              <div className='col-lg-6 col-md-6 pl-0'>\n                <div className='billing-info mb-20'>\n                  <label>ƒ∞sim</label>\n                  <input\n                    type='text'\n                    disabled={addressType === 'invoice' && invoiceType === 'kurumsal'}\n                    ref={register({\n                      required: \"ƒ∞sim bo≈ü bƒ±rakƒ±lamaz.\",\n                      pattern: {\n                        value: /^[a-zA-Zƒü√º≈ü√∂√ßƒ±ƒ∞ƒû√ú≈û√ñ√á ]+$/,\n                        message:\n                          \"ƒ∞sim bo≈ü bƒ±rakƒ±lamaz. \",\n                      },\n                    })}\n                    name='name'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.name\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.name\n                        : \"\"\n                    }\n                  />\n                  {errors.name && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.name.message}\n                    </div>\n                  )}\n                </div>\n                </div>  \n              <div className='col-lg-6 col-md-6 pl-0'>\n                <div className='billing-info mb-20'>\n                  <label>Soyisim</label>\n                  <input\n                    type='text'\n                    disabled={addressType === 'invoice' && invoiceType === 'kurumsal'}\n                    ref={register({\n                      required: \"Soyisim bo≈ü bƒ±rakƒ±lamaz.\",\n                      pattern: {\n                        value: /^[a-zA-Zƒü√º≈ü√∂√ßƒ±ƒ∞ƒû√ú≈û√ñ√á ]+$/,\n                        message:\n                          \"Soyisim bo≈ü bƒ±rakƒ±lamaz.\",\n                      },\n                    })}\n                    name='surname'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.surname\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.surname\n                        : \"\"\n                    }\n                  />\n                  {errors.surname && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.surname.message}\n                    </div>\n                  )}\n                </div>\n                </div>\n              </div>}\n              {addressType === 'invoice' && invoiceType === 'kurumsal' ? null :\n              <div className='col-lg-6 col-md-6'>\n                <div className='billing-info mb-20'>\n                  <label className={invoiceType === \"kurumsal\" ? addressType === \"invoice\" ? \"noneed\" : \"\" : \"\"}>\n                    TC Kimlik Numarasƒ±\n                  </label>\n                  <input\n                    className={invoiceType === \"kurumsal\" ? addressType === \"invoice\" ? \"noneed\" : \"\" : \"\"}\n                    type='text'\n                    maxLength=\"11\"\n                    ref={\n                      invoiceType === \"kurumsal\" \n                        ? addressType === \"invoice\" ? register({ required: false })\n                        : register({\n                            required: \"TC kimlik numarasƒ± bo≈ü bƒ±rakƒ±lamaz.\",\n                            pattern: {\n                              value: /^((?!(0))[0-9]{11})$/,\n                              message:\n                                \"11 haneli TC kimlik numaranƒ±zƒ± bo≈üluk bƒ±rakmadan giriniz. \",\n                            },\n                          }) : register({\n                            required: \"TC kimlik numarasƒ± bo≈ü bƒ±rakƒ±lamaz.\",\n                            pattern: {\n                              value: /^((?!(0))[0-9]{11})$/,\n                              message:\n                                \"11 haneli TC kimlik numaranƒ±zƒ± bo≈üluk bƒ±rakmadan giriniz. \",\n                            },\n                          })\n                    }\n                    disabled={invoiceType === \"kurumsal\" && addressType === \"invoice\"}\n                    name='identity'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.identity\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.identity\n                        : \"\"\n                    }\n                  />\n                  {invoiceType === \"bireysel\" && errors.identity && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.identity.message}\n                    </div>\n                  )}\n                </div>\n              </div>}\n              {invoiceType === \"kurumsal\" && (\n                <>\n                  <div className='col-lg-12'>\n                    <div className='billing-info mb-20'>\n                      <label>Fƒ∞rma ƒ∞smi</label>\n                      <input\n                        type='text'\n                        ref={\n                          invoiceType === \"bireysel\"\n                            ? register({ required: false })\n                            : register({\n                                required: \"Firma ismi bo≈ü bƒ±rakƒ±lamaz.\",\n                                pattern: {\n                                  value: /^.{0,75}$/,\n                                  message:\n                                    \"Firma ismi en fazla 75 karakter olmalƒ±.\",\n                                },\n                              })\n                        }\n                        name='firm'\n                        defaultValue={\n                          addressType === \"shipping\" && state.address\n                            ? state.address.firm\n                            : addressType === \"invoice\" && state.invoiceAddress\n                            ? state.invoiceAddress.firm\n                            : \"\"\n                        }\n                        disabled={invoiceType === \"bireysel\"}\n                      />\n                      {errors.firm && (\n                        <div className='alert alert-danger small' role='alert'>\n                          {errors.firm.message}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className='col-lg-6 col-md-6'>\n                    <div className='billing-info mb-20'>\n                      <label>Vergi Dairesi</label>\n                      <input\n                        type='text'\n                        ref={\n                          invoiceType === \"bireysel\"\n                            ? register({ required: false })\n                            : register({\n                                required: \"Vergi dairesi bo≈ü bƒ±rakƒ±lamaz.\",\n                                pattern: {\n                                  value: /^.{0,50}$/,\n                                  message:\n                                    \"Firma ismi en fazla 50 karakter olmalƒ±.\",\n                                },\n                              })\n                        }\n                        name='vergid'\n                        defaultValue={\n                          addressType === \"shipping\" && state.address\n                            ? state.address.vergid\n                            : addressType === \"invoice\" && state.invoiceAddress\n                            ? state.invoiceAddress.vergid\n                            : \"\"\n                        }\n                        disabled={invoiceType === \"bireysel\"}\n                      />\n                      {errors.vergid && (\n                        <div className='alert alert-danger small' role='alert'>\n                          {errors.vergid.message}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className='col-lg-6 col-md-6'>\n                    <div className='billing-info mb-20'>\n                      <label>Vergi Numarasƒ±</label>\n                      <input\n                        type='text'\n                        maxLength=\"10\"\n                        ref={\n                          invoiceType === \"bireysel\"\n                            ? register({ required: false })\n                            : register({\n                                required: \"Vegi numarasƒ± bo≈ü bƒ±rakƒ±lamaz.\",\n                                pattern: {\n                                  value: /^((?!(0))[0-9]{0,22})$/,\n                                  message:\n                                    \"Vergi no rakamlardan olu≈üur ve 10 haneden fazla olamaz. \",\n                                },\n                              })\n                        }\n                        name='vergin'\n                        defaultValue={\n                          addressType === \"shipping\" && state.address\n                            ? state.address.vergin\n                            : addressType === \"invoice\" && state.invoiceAddress\n                            ? state.invoiceAddress.vergin\n                            : \"\"\n                        }\n                        disabled={invoiceType === \"bireysel\"}\n                      />\n                      {errors.vergin && (\n                        <div className='alert alert-danger small' role='alert'>\n                          {errors.vergin.message}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </>\n              )}\n              <div className='col-lg-12'>\n                <div className='billing-select mb-20'>\n                  <label>ƒ∞l</label>\n                  <select\n                    onChange={(e) => setCity(e.target.value)}\n                    ref={register({\n                      required: \"ƒ∞l bo≈ü bƒ±rakƒ±lamaz.\",\n                      pattern: {\n                        value: /^(?!.*Se√ßiniz).*$/,\n                        message: \"ƒ∞l bo≈ü bƒ±rakƒ±lamaz.\",\n                      },\n                    })}\n                    name='il'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.il\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.il\n                        : \"\"\n                    }\n                  >\n                    {city_query_error ? (\n                      <option disabled className='text-hide'>\n                        ƒ∞l listesi y√ºklenemedi, il ve il√ßeyi a≈üaƒüƒ±daki adres\n                        alanƒ±na yazabilirsiniz.\n                      </option>\n                    ) : (\n                      <option className='text-hide'>Se√ßiniz</option>\n                    )}\n\n                    {city_query_data &&\n                      city_query_data.cities.map((city) => {\n                        return (\n                          <option value={city.city} key={city.id}>\n                            {city.city}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.il && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.il.message}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className='col-lg-12'>\n                <div className='billing-select mb-20'>\n                  <label>ƒ∞l√ße</label>\n                  <select\n                    ref={register({\n                      required: \"ƒ∞l√ße bo≈ü bƒ±rakƒ±lamaz.\",\n                      pattern: {\n                        value: /^(?!.*Se√ßiniz).*$/,\n                        message: \"ƒ∞l√ße bo≈ü bƒ±rakƒ±lamaz.\",\n                      },\n                    })}\n                    name='il√ße'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.il√ße\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.il√ße\n                        : \"\"\n                    }\n                  >\n                    {town_query_error ? (\n                      <option disabled className='text-hide'>\n                        ƒ∞l√ße listesi y√ºklenemedi, il ve il√ßeyi a≈üaƒüƒ±daki adres\n                        alanƒ±na yazabilirsiniz..\n                      </option>\n                    ) : (\n                      <option className='text-hide'>Se√ßiniz</option>\n                    )}\n\n                    {town_query_data &&\n                      town_query_data.towns.map((town) => {\n                        return (\n                          <option value={town.town} key={town.id}>\n                            {town.town}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.il√ße && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.il√ße.message}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className='col-lg-12'>\n                <div className='billing-info mb-20'>\n                  <label>Adres</label>\n                  <input\n                    maxLength=\"120\"\n                    className='billing-address'\n                    placeholder='Cadde, sokak, kapƒ± numarasƒ± gibi bilgileri eksiksiz giriniz.'\n                    type='text'\n                    ref={register({ required: true, minLength: 7 })}\n                    name='street'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.street\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.street\n                        : \"\"\n                    }\n                  />\n                  {errors.street && (\n                    <div className='alert alert-danger small' role='alert'>\n                      Adres en az 7 karakter olmalƒ±.\n                    </div>\n                  )}\n                </div>\n              </div>\n              {addressType !== 'invoice'&&\n              <div className='col-lg-6 col-md-6'>\n                 <div className='billing-info mb-20'>\n                  <label>Telefon</label>\n                  <input\n                    type='tel'\n                    disabled={addressType === 'invoice'}\n                    ref={register({\n                      required: \"Telefon bo≈ü bƒ±rakƒ±lamaz.\",\n                      pattern: {\n                        value: /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n                        message: \"Telefon numarasƒ± rakamlardan olu≈üur.\",\n                      },\n                    })}\n                    name='phone'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.phone\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.phone\n                        : \"\"\n                    }\n                  />\n                  {errors.phone && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.phone.message}\n                    </div>\n                  )}\n                </div>\n              </div>}\n              {addressType === 'shipping'&&\n              <div className='col-lg-6 col-md-6 nogo'>\n                <div className='billing-info mb-20'>\n                  <label>Email</label>\n                  <input\n                    type='text'\n                    disabled={addressType === 'invoice'}\n                    ref={register({\n                      required: \"Email bo≈ü bƒ±rakƒ±lamaz \",\n                      pattern: {\n                        value: /^\\s*[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\\s*$/i,\n                        message: \"Ge√ßerli bir email girin.\",\n                      },\n                    })}\n                    name='email'\n                    defaultValue={\n                      addressType === \"shipping\" && state.address\n                        ? state.address.email\n                        : addressType === \"invoice\" && state.invoiceAddress\n                        ? state.invoiceAddress.email\n                        : state.user.email ? state.user.email : \"\"\n                    }\n                  />\n                  {errors.email && (\n                    <div className='alert alert-danger small' role='alert'>\n                      {errors.email.message}\n                    </div>\n                  )}\n                </div>\n              </div>}\n              <div className='button-box pl-15'>\n                <button className='submitAddress border' type='submit'>\n                  <span>Kaydet</span>\n                </button>\n              </div>\n            </div>}\n          </form>\n        </div>\n      </Modal>\n    </Fragment>\n  );\n}\n\nexport default InvoiceModal;\n","import gql from \"graphql-tag\";\n\nconst INSERT_ORDER = gql`\nmutation OrderAction($addresses: [addressInput], $user_ordered: userInput, $order_items: [itemInput], $notes: String!, $isGift: Boolean!) {\n  OrderAction(addresses: $addresses, user_ordered: $user_ordered, order_items: $order_items, notes: $notes, isGift: $isGift){\n    token, paymentPageUrl\n  }\n}\n`; \n\nexport default INSERT_ORDER\n\n","import React, { Fragment } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { getDiscountPrice } from \"../../helpers/product\";\n\nexport default function ContractModal(props){\nconst {cartItems} = props\n    let cartTotalPrice = 0;\n    const today = new Date()\n    return(\n        \n        <Modal\n        show={props.show}\n        onHide={props.onHide}\n        className='product-quickview-modal-wrapper'\n      >\n          <Modal.Header closeButton><h3 className='cart-page-title'>√ñn Bilgilendirme Formu</h3></Modal.Header>\n           <div className='cart-main-area pt-40 pb-70 m-3'>\n           <p>1) S√∂zle≈üme konusu mal veya hizmetin adƒ±, adedi, KDV dahil satƒ±≈ü fiyatƒ±, √∂deme ≈üekli ve kƒ±saca temel nitelikleri</p>\n           <h4>S√ñZLE≈ûME KONUSU √úR√úN/√úR√úNLER Bƒ∞LGƒ∞LERƒ∞</h4>\n          <div className='container'>\n            {cartItems && cartItems.length >=1 && (\n                <Fragment>\n        <div className='row'>\n                  <div className='col-12'>\n                    <div className='table-content table-responsive cart-table-content'>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>√úr√ºn Adƒ±</th>\n                            <th>Fiyat</th>\n                            <th>Adet</th>\n                            <th>Ara Toplam</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {cartItems.map((cartItem, key) => {\n                            const discountedPrice = getDiscountPrice(\n                              cartItem.price,\n                              cartItem.discount\n                            );\n                            const finalProductPrice = (\n                              cartItem.price\n                            ).toFixed(2);\n                            const finalDiscountedPrice = (\n                              discountedPrice\n                            ).toFixed(2);\n\n                            discountedPrice != null\n                              ? (cartTotalPrice +=\n                                  finalDiscountedPrice * cartItem.quantity)\n                              : (cartTotalPrice +=\n                                  finalProductPrice * cartItem.quantity);\n                            return (\n                              <tr key={key}>\n                                \n\n                                <td className='product-name'>\n                                  \n                                    {cartItem.name}\n                               \n                                  {cartItem.selectedProductColor &&\n                                  cartItem.selectedProductSize ? (\n                                    <div className='cart-item-variation'>\n                                      <span>\n                                        Color: {cartItem.selectedProductColor}\n                                      </span>\n                                      <span>\n                                        Size: {cartItem.selectedProductSize}\n                                      </span>\n                                    </div>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </td>\n\n                                <td className='product-price-cart'>\n                                  {discountedPrice !== null ? (\n                                    <Fragment>\n                                      <span className='amount old'>\n                                        {finalProductPrice +\n                            \" TL\" }\n                                      </span>\n                                      <span className='amount'>\n                                        {finalDiscountedPrice +\n                            \" TL\" }\n                                      </span>\n                                    </Fragment>\n                                  ) : (\n                                    <span className='amount'>\n                                      {finalProductPrice +\n                            \" TL\" }\n                                    </span>\n                                  )}\n                                </td>\n\n                                <td className='product-quantity'>\n                                    \n                                   \n                                     {cartItem.quantity}\n                                      \n                                  \n                                </td>\n                                <td className='product-subtotal'>\n                                  {discountedPrice !== null\n                                    ? \n                                      (\n                                        finalDiscountedPrice * cartItem.quantity\n                                      ).toFixed(2) +\n                                      \" TL\" \n                                    : \n                                      (\n                                        finalProductPrice * cartItem.quantity\n                                      ).toFixed(2) +\n                                      \" TL\" \n                                      }\n                                </td>\n\n                              </tr>\n                            );\n                          })}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                  <div className='col lg-12 d-flex'>\n                      <div className=\"col lg-6\"><h4>√ñDENECEK TOPLAM TUTAR (KDV Dahil)</h4> </div>\n                      <div className=\"col lg-6 text-right mr-4\"><h4>\n                          {cartTotalPrice.toFixed(2) +\n                            \" TL\" }\n                        </h4></div>\n\n                  </div>\n                </div>\n                </Fragment>\n                )}\n                </div>\n                <p className=\"mt-2\">√úr√ºnlerin Cinsi ve t√ºr√º, Miktarƒ±, Marka/Modeli, Rengi, Satƒ±≈ü Bedeli yukarƒ±da belirtildiƒüi gibidir.</p>\n              <p>Yukarƒ±daki b√∂l√ºmde bankanƒ±za iletilecek sipari≈ü toplamƒ±nƒ±n ka√ß taksitle √∂deneceƒüi bilgisi bulunmaktadƒ±r. Bankanƒ±z kampanyalar d√ºzenleyerek sizin se√ßtiƒüiniz taksit adedinin daha √ºst√ºnde bir taksit adedi uygulayabilir, taksit √∂teleme gibi hizmetler sunulabilir. Bu t√ºr kampanyalar bankanƒ±zƒ±n inisiyatifindedir ve ≈üirketimizin bilgisi d√¢hilinde olmasƒ± durumunda sayfalarƒ±mƒ±zda kampanyalar hakkƒ±nda bilgi verilmektedir. Kredi kartƒ±nƒ±zƒ±n hesap kesim tarihinden itibaren sipari≈ü toplamƒ± taksit adedine b√∂l√ºnerek kredi kartƒ± √∂zetinize bankanƒ±z tarafƒ±ndan yansƒ±tƒ±lacaktƒ±r. Banka taksit tutarlarƒ±nƒ± k√ºsurat farklarƒ±nƒ± dikkate alarak aylara e≈üit olarak daƒüƒ±tmayabilir. Detaylƒ± √∂deme planƒ±nƒ±zƒ±n olu≈üturulmasƒ± bankanƒ±z inisiyatifindedir.\n\n</p>\n<p>2) Kargo fiyatƒ± sipari≈ü toplam tutarƒ±na eklenmektedir. √úr√ºn bedeline dahil deƒüildir. Teslimat, anla≈ümalƒ± kargo ≈üirketi aracƒ±lƒ±ƒüƒ± ile, Alƒ±cƒ±'nƒ±n yukarƒ±da belirtilen adresinde elden teslim edilecektir. Teslim anƒ±nda Alƒ±cƒ±'nƒ±n adresinde bulunmamasƒ± durumunda dahi Firmamƒ±z edimini tam ve eksiksiz olarak yerine getirmi≈ü olarak kabul edilecektir. Bu nedenle, Alƒ±cƒ±'nƒ±n √ºr√ºn√º ge√ß teslim almasƒ±ndan kaynaklanan her t√ºrl√º zarar ile √ºr√ºn√ºn kargo ≈üirketinde beklemi≈ü olmasƒ± ve/veya kargonun Firmamƒ±za geri iade edilmesinden dolayƒ± da olu≈üan giderler de Alƒ±cƒ±'ya aittir.</p>\n             <p>3) √úr√ºn MICOTA ve ALICI arasƒ±nda ba≈ükaca bir s√∂zle≈üme yok ise internet satƒ±≈ü s√∂zle≈ümesi tarihinden itibaren en ge√ß 30 g√ºn i√ßerisinde teslim edilecektir. √úr√ºn√ºn√ºn teslim edilmesi anƒ±na kadar t√ºm sorumluluk firmamƒ±za aittir.\n\n</p>\n             <p>4) \"T√ºketicinin hi√ßbir hukuki ve cezai sorumluluk √ºstlenmeksizin ve hi√ßbir gerek√ße g√∂stermeksizin malƒ± teslim aldƒ±ƒüƒ± veya s√∂zle≈ümenin imzalandƒ±ƒüƒ± tarihten itibaren ond√∂rt g√ºn i√ßerisinde malƒ± veya hizmeti reddederek s√∂zle≈ümeden cayma hakkƒ±nƒ±n var olduƒüunu ve cayma bildiriminin satƒ±cƒ± veya saƒülayƒ±cƒ±ya ula≈ümasƒ± tarihinden itibaren malƒ± geri almayƒ± taahh√ºt ederiz.\" Firmamƒ±zƒ±n yukarƒ±da belirtilen y√ºk√ºml√ºl√ºklerini yerine getirmemesi h√¢linde, cayma hakkƒ± s√ºresi 6 aydƒ±r. 14 g√ºnl√ºk s√ºre ile 6 aylƒ±k s√ºre, malƒ±n teslimine ili≈ükin s√∂zle≈ümelerde, t√ºketicinin malƒ± teslim aldƒ±ƒüƒ± g√ºnden itibaren, diƒüer s√∂zle≈ümelerde ise s√∂zle≈ümenin akdedildiƒüi g√ºnden itibaren i≈ülemeye ba≈ülar. ƒ∞≈ü bu, \"√ñn Bilgilendirme Formunda\" ve Mesafeli S√∂zle≈ümelere Dair Y√∂netmelikte belirtilen y√ºk√ºml√ºl√ºklerin, √º√ß aylƒ±k s√ºre i√ßerisinde yerine getirilmesi h√¢linde, 14 g√ºnl√ºk cayma hakkƒ± s√ºresi, s√∂z konusu y√ºk√ºml√ºl√ºklerin yerine getirildiƒüi g√ºnden itibaren i≈ülemeye ba≈ülar. Cayma hakkƒ±nƒ±n kullanƒ±ldƒ±ƒüƒ±na dair irade beyanƒ±nƒ±n bu s√ºre i√ßinde yazƒ±lƒ± olarak veya bir s√ºrekli veri ta≈üƒ±yƒ±cƒ±sƒ±yla bildirilmesi yeterlidir.\n\n</p>\n             <p>5) Sipari≈ü vermek i√ßin kullandƒ±ƒüƒ±nƒ±z internet sitesinin kullanƒ±lmasƒ± nedeniyle, √ºcret tarifesi ile ilgili olarak t√ºketicilere ilave bir maliyet y√ºklenmemektedir.\n\n</p>\n             <p>6) ƒ∞≈ü bu \"Bilgilendirme Formunda\" belirtilen fiyat d√¢hil t√ºm taahh√ºtlerin ge√ßerlik s√ºresi 30 g√ºnd√ºr.\n\n</p>\n             <p>7) T√ºketicilerin ≈üik√¢yet ve itirazlarƒ±: Ba≈üvurularƒ±nƒ±zƒ±, G√ºmr√ºk ve Ticaret Bakanlƒ±ƒüƒ± tarafƒ±ndan her yƒ±l Aralƒ±k ayƒ±nda belirlenen parasal sƒ±nƒ±rlar d√¢hilinde (2013 yƒ±lƒ± i√ßin B√ºy√ºk≈üehir stat√ºs√ºnde bulunan illerde faaliyet g√∂steren T√ºketici Sorunlarƒ± Hakem Heyetlerinin yetkili olmalarƒ±na ili≈ükin parasal sƒ±nƒ±r 3.110,58 TL ve B√ºy√ºk≈üehir stat√ºs√ºnde bulunmayan illerde faaliyet g√∂steren T√ºketici Sorunlarƒ± Hakem Heyetlerinin yetkili olmalarƒ±na ili≈ükin parasal sƒ±nƒ±r ise 1.191,52 TL'dir. Bahsedilen bedelin altƒ±ndaki tutarlar i√ßin ƒ∞l√ße T√ºketici Sorunlarƒ± Hakem Heyeti Ba≈ükanlƒ±klarƒ±na ba≈üvurulmasƒ± gerekmektedir.) mal veya hizmeti satƒ±n aldƒ±ƒüƒ±nƒ±z veya ikametg√¢hƒ±nƒ±zƒ±n bulunduƒüu yerdeki T√ºketici Sorunlarƒ± Hakem Heyetine veya T√ºketici Mahkemesine yapabilirsiniz.\n\n</p>\n             <p>8) √ñdemenin kredi kartƒ± vb. ile harcama belgesi d√ºzenlenmeksizin yapƒ±ldƒ±ƒüƒ± durumlarda, kartƒ±n bir ba≈ükasƒ± tarafƒ±ndan hukuka aykƒ±rƒ± ≈üekilde kullanƒ±lmasƒ± h√¢linde; 23/2/2006 tarihli 5464 sayƒ±lƒ± Banka Kartlarƒ± ve Kredi Kartlarƒ± Kanunu ve 10/3/2007 tarihli ve 26458 sayƒ±lƒ± Resm√Æ Gazetede yayƒ±mlanan Banka Kartlarƒ± ve Kredi Kartlarƒ± Hakkƒ±nda Y√∂netmelik h√ºk√ºmlerine g√∂re i≈ülem yapƒ±lƒ±r.\n\n</p>\n<p>9) Alƒ±cƒ±nƒ±n temerr√ºde d√º≈ümesinin hukuki sonu√ßlarƒ± hususunda, T√ºketicinin Korunmasƒ± Hakkƒ±nda Kanunun \"Taksitle Satƒ±≈ü\" ba≈ülƒ±klƒ± 6/A maddesi h√ºk√ºmleri uygulanƒ±r.\n\n</p>\n<p>10) √úr√ºnler'in tanƒ±mƒ±, birim tutarƒ±, adedi ve √∂deme ko≈üullarƒ±na ili≈ükin bilgiler a≈üaƒüƒ±da belirtildiƒüi gibi olup, bu bilgiler Alƒ±cƒ± tarafƒ±ndan da onaylanmƒ±≈ütƒ±r.\n\n</p>\n                        <p>{today.toLocaleString(\"en-GB\")}</p>\n              </div>\n                      </Modal>\n                     \n    )\n}","import React, { Fragment } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { getDiscountPrice } from \"../../helpers/product\";\n\nexport default function DistanceModal(props) {\n  const { cartItems } = props;\n  const { address } = props;\n  let cartTotalPrice = 0;\n  const today = new Date();\n  return (\n    <Modal\n      show={props.show}\n      onHide={props.onHide}\n      className='product-quickview-modal-wrapper'\n    >\n      <Modal.Header closeButton><h3 className='cart-page-title'>Mesafeli Satƒ±≈ü S√∂zle≈ümesi</h3></Modal.Header>\n      <div className='cart-main-area pt-40 pb-70 m-3'>\n        <h4>1. TARAFLAR</h4>\n        <h5>SATICI</h5>\n        <p>MICOTA AH≈ûAP √úR√úNLERƒ∞</p>\n        <p>K√º√ß√ºksu Mah. Asma sok. no:10 C-4 √úsk√ºdar ƒ∞stanbul</p>\n        <p>05302225663 / info@micota.com.tr</p>\n        <h5>ALICI</h5>\n        {address && \n        <>\n        <p>{address.name + \" \" + address.surname}</p>\n        <p>{address.identity}</p>\n        <p>{address.street + \" \" + address.il√ße + \" \" + address.il}</p>\n        <p>{address.phone + \" / \" + address.email}</p>\n        </>}\n        <p>\n          1) S√∂zle≈üme konusu mal veya hizmetin adƒ±, adedi, KDV dahil satƒ±≈ü\n          fiyatƒ±, √∂deme ≈üekli ve kƒ±saca temel nitelikleri\n        </p>\n        <h4>2. S√ñZLE≈ûMENƒ∞N KONUSU VE KAPSAMI</h4>\n        <p>\n          ƒ∞≈ü bu Mesafeli Satƒ±≈ü S√∂zle≈ümesi T√ºketicinin Korunmasƒ± Hakkƒ±ndaki Kanun\n          ve Mesafeli Satƒ±≈ü S√∂zle≈ümeler Y√∂netmeliƒüi‚Äône uygun olarak\n          d√ºzenlenmi≈ütir. ƒ∞≈übu s√∂zle≈ümenin konusu, ALICI'nƒ±n SATICI'ya ait\n          shop.micota.com isimli internet sitesinden elektronik ortamda 3.\n          Maddede sipari≈üini yaptƒ±ƒüƒ± i≈übu S√∂zle≈ümede nitelikleri ve satƒ±≈ü fiyatƒ±\n          belirtilen √ºr√ºn√ºn satƒ±≈üƒ± ve teslimi ile ilgili olarak 6502 sayƒ±lƒ±\n          T√ºketicilerin Korunmasƒ± Hakkƒ±ndaki Kanun ve 27.11.2014 tarih ve 29188\n          sayƒ±lƒ± Resmi Gazete‚Äôde yayƒ±nlanan Mesafeli S√∂zle≈ümeler Y√∂netmeliƒüi\n          h√ºk√ºmleri gereƒüince taraflarƒ±n hak ve y√ºk√ºml√ºl√ºklerinin saptanmasƒ±nƒ±\n          olu≈üturur. ƒ∞≈übu S√∂zle≈üme'nin taraflarƒ± i≈übu S√∂zle≈üme tahtƒ±nda 6502\n          Sayƒ±lƒ± T√ºketicinin Korunmasƒ± Hakkƒ±nda Kanun ve Mesafeli S√∂zle≈ümeler\n          Y√∂netmeliƒüi'den kaynaklanan y√ºk√ºml√ºl√ºk ve sorumluluklarƒ±nƒ±\n          bildiklerini ve anladƒ±klarƒ±nƒ± kabul ve beyan ederler.\n        </p>\n        <div className='container'>\n          <h4>\n            3. S√ñZLE≈ûME KONUSU MAL VE Hƒ∞ZMETƒ∞N TEMEL Nƒ∞TELƒ∞KLERƒ∞ VE Fƒ∞YATI (KDV\n            DAHƒ∞L)\n          </h4>\n          {cartItems && cartItems.length >= 1 && (\n            <Fragment>\n              <div className='row'>\n                <div className='col-12'>\n                  <div className='table-content table-responsive cart-table-content'>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>√úr√ºn Adƒ±</th>\n                          <th>Fiyat</th>\n                          <th>Adet</th>\n                          <th>Ara Toplam</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {cartItems.map((cartItem, key) => {\n                          const discountedPrice = getDiscountPrice(\n                            cartItem.price,\n                            cartItem.discount\n                          );\n                          const finalProductPrice = cartItem.price.toFixed(2);\n                          const finalDiscountedPrice = discountedPrice.toFixed(\n                            2\n                          );\n\n                          discountedPrice != null\n                            ? (cartTotalPrice +=\n                                finalDiscountedPrice * cartItem.quantity)\n                            : (cartTotalPrice +=\n                                finalProductPrice * cartItem.quantity);\n                          return (\n                            <tr key={key}>\n                              <td className='product-name'>\n                                {cartItem.name}\n\n                                {cartItem.selectedProductColor &&\n                                cartItem.selectedProductSize ? (\n                                  <div className='cart-item-variation'>\n                                    <span>\n                                      Color: {cartItem.selectedProductColor}\n                                    </span>\n                                    <span>\n                                      Size: {cartItem.selectedProductSize}\n                                    </span>\n                                  </div>\n                                ) : (\n                                  \"\"\n                                )}\n                              </td>\n\n                              <td className='product-price-cart'>\n                                {discountedPrice !== null ? (\n                                  <Fragment>\n                                    <span className='amount old'>\n                                      {finalProductPrice + \" TL\"}\n                                    </span>\n                                    <span className='amount'>\n                                      {finalDiscountedPrice + \" TL\"}\n                                    </span>\n                                  </Fragment>\n                                ) : (\n                                  <span className='amount'>\n                                    {finalProductPrice + \" TL\"}\n                                  </span>\n                                )}\n                              </td>\n\n                              <td className='product-quantity'>\n                                {cartItem.quantity}\n                              </td>\n                              <td className='product-subtotal'>\n                                {discountedPrice !== null\n                                  ? (\n                                      finalDiscountedPrice * cartItem.quantity\n                                    ).toFixed(2) + \" TL\"\n                                  : (\n                                      finalProductPrice * cartItem.quantity\n                                    ).toFixed(2) + \" TL\"}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n                <div className='col lg-12 d-flex'>\n                  <div className='col lg-6'>\n                    <h4>√ñDENECEK TOPLAM TUTAR (KDV Dahil)</h4>{\" \"}\n                  </div>\n                  <div className='col lg-6 text-right mr-4'>\n                    <h4>{cartTotalPrice.toFixed(2) + \" TL\"}</h4>\n                  </div>\n                </div>\n              </div>\n            </Fragment>\n          )}\n        </div>\n        <h4>4. TESLƒ∞MAT</h4>\n        <p>\n          Teslimat, Micota tarafƒ±ndan kargo aracƒ±lƒ±ƒüƒ± yukarƒ±da belirtilen\n          teslimat adresine sipari≈ü onaylandƒ±ktan sonra 10 i≈ü g√ºn√º, her\n          h√¢l√ºk√¢rda 30 g√ºnl√ºk yasal s√ºresi i√ßinde yapƒ±lacaktƒ±r. Resmi tatiller\n          ve dini/milli bayram g√ºnleri bu s√ºreden sayƒ±lmaz. Teslimat sƒ±rasƒ±nda\n          M√º≈üteri √ºr√ºn√º muayene ettikten sonra teslim tutanaƒüƒ±nƒ± imzalayacaktƒ±r.\n          M√º≈üteri veya M√º≈üteri adƒ±na hareket eden ki≈üi, bu teslim tutanaƒüƒ±nƒ±\n          imzalamakla, √ºr√ºn√º tam, eksiksiz ve hasarsƒ±z olarak teslim aldƒ±ƒüƒ±nƒ±\n          beyan etmi≈ü olacaktƒ±r. Grev, lokavt, tabii afetler, ayaklanma, halk\n          hareketleri, n√ºkleer risk ve tehlike, sava≈ü, istila, ihtilal, i√ß\n          sava≈ü, sabotaj ve yangƒ±n halleri gibi olaƒüan√ºst√º durumlarda, indirim\n          d√∂nemlerinde ve alƒ±cƒ±dan kaynaklanan (adreste bulunmama, teslim alacak\n          yetkilinin olmamasƒ±, alƒ±cƒ±nƒ±n adresten ta≈üƒ±nmƒ±≈ü olmasƒ±, vb.)\n          durumlarda teslimat s√ºresi ve ko≈üullarƒ± deƒüi≈ükenlik g√∂sterebilir.\n        </p>\n        <h4>5. CAYMA HAKKI</h4>\n        <p>\n          T√ºketici, 14 (on d√∂rt) g√ºn i√ßinde herhangi bir gerek√ße g√∂stermeksizin\n          ve cezai ≈üart √∂demeksizin s√∂zle≈ümeden cayma hakkƒ±na sahiptir. Cayma\n          hakkƒ± s√ºresi, hizmet ifasƒ±na ili≈ükin s√∂zle≈ümelerde s√∂zle≈ümenin\n          kurulduƒüu g√ºn; mal teslimine ili≈ükin s√∂zle≈ümelerde ise t√ºketicinin\n          veya t√ºketici tarafƒ±ndan belirlenen √º√ß√ºnc√º ki≈üinin malƒ± teslim aldƒ±ƒüƒ±\n          g√ºn ba≈ülar. Ancak t√ºketici, s√∂zle≈ümenin kurulmasƒ±ndan malƒ±n teslimine\n          kadar olan s√ºre i√ßinde de cayma hakkƒ±nƒ± kullanabilir. Cayma hakkƒ±\n          s√ºresinin belirlenmesinde; a) Tek sipari≈ü konusu olup ayrƒ± ayrƒ± teslim\n          edilen mallarda, t√ºketicinin veya t√ºketici tarafƒ±ndan belirlenen\n          √º√ß√ºnc√º ki≈üinin son malƒ± teslim aldƒ±ƒüƒ± g√ºn, b) Birden fazla par√ßadan\n          olu≈üan mallarda, t√ºketicinin veya t√ºketici tarafƒ±ndan belirlenen\n          √º√ß√ºnc√º ki≈üinin son par√ßayƒ± teslim aldƒ±ƒüƒ± g√ºn, c) Belirli bir s√ºre\n          boyunca malƒ±n d√ºzenli tesliminin yapƒ±ldƒ±ƒüƒ± s√∂zle≈ümelerde, t√ºketicinin\n          veya t√ºketici tarafƒ±ndan belirlenen √º√ß√ºnc√º ki≈üinin ilk malƒ± teslim\n          aldƒ±ƒüƒ± g√ºn esas alƒ±nƒ±r. Mal teslimi ile hizmet ifasƒ±nƒ±n birlikte\n          yapƒ±ldƒ±ƒüƒ± s√∂zle≈ümelerde, mal teslimine ili≈ükin cayma hakkƒ± h√ºk√ºmleri\n          uygulanƒ±r. Cayma hakkƒ±nƒ±n kullanƒ±ldƒ±ƒüƒ±na dair bildirimin cayma hakkƒ±\n          s√ºresi dolmadan, yazƒ±lƒ± olarak veya kalƒ±cƒ± veri saklayƒ±cƒ±sƒ± ile\n          y√∂neltilmesi yeterlidir. Cayma hakkƒ±nƒ±n kullanƒ±lmasƒ±nda t√ºketici,\n          kararƒ±nƒ± bildiren a√ßƒ±k bir beyanda bulunabilir. Cayma Hakkƒ±nƒ± kullanan\n          t√ºketici, √ºr√ºn√º 10 g√ºn i√ßinde satcƒ±ya iade etmek zorundadƒ±r. Cayma\n          hakkƒ±nƒ±n s√ºresi i√ßinde kullanƒ±lmamasƒ± halinde t√ºketici bu hakkƒ±nƒ±\n          kaybedecektir.\n        </p>\n        <h4>\n          6. CAYMA HAKKININ KULLANIMINA VE √úR√úN√úN ƒ∞ADESƒ∞NE ƒ∞Lƒ∞≈ûKƒ∞N H√úK√úMLER\n        </h4>\n        <p>\n          6.1. Faturasƒ±z ve kutusuz √ºr√ºnler iade yapƒ±lamaz. 6.2. Orijinal\n          ambalajƒ± bozulmu≈ü, tekrar satƒ±labilirlik √∂zelliƒüini kaybetmi≈ü, ba≈üka\n          bir m√º≈üteri tarafƒ±ndan satƒ±n alƒ±namayacak durumda olan √ºr√ºnlerin\n          iadesi kabul edilmemektedir. ƒ∞ade edilmek istenen √ºr√ºn√ºn t√ºm\n          etiketleri √ºr√ºn√ºn √ºzerinde olmalƒ± ve tadilat g√∂rmemi≈ü olmalƒ±dƒ±r. 6.3.\n          ƒ∞ade etmek istediƒüiniz √ºr√ºn ile birlikte sizdeki t√ºm kopyalarƒ± ile\n          faturanƒ±n aslƒ± ve iade takip numaranƒ±zƒ± g√∂ndermeniz\n          gerekmektedir.Faturasƒ±z √ºr√ºnlerde iade kabul edilmemektedir. 6.4. ƒ∞ade\n          etmek istediƒüiniz √ºr√ºnler i√ßin kargo √ºcreti firmamƒ±z tarafƒ±ndan\n          kar≈üƒ±lanmaktadƒ±r. √ºcretsiz g√∂nderiden faydalanabilmek i√ßin, paketinizi\n          anla≈ümalƒ± olduƒüumuz kargo firmasƒ± ile Satƒ±cƒ±'nƒ±n Koza Mahallesi, 1673.\n          Sok. No:125, 34517 Esenyurt/ƒ∞stanbul adresine ula≈ütƒ±rmalƒ±sƒ±nƒ±z. Diƒüer\n          kargo ≈üirketleriyle g√∂nderilen iadelerde kargo √ºcreti alƒ±cƒ±ya aittir.\n          6.5. Kozmetik, gƒ±da, abiye, christofle √ºr√ºnleri, i√ß giyim, mayo,\n          bikini, takƒ±, kitap/dergi, teknolojik √ºr√ºnler, ‚ÄúKendi E≈üarbƒ±nƒ±\n          Tasarla‚Äù ve ‚Äúƒ∞sme √ñzel E≈üarp‚Äù √ºr√ºnlerinin iadesi ve deƒüi≈üimi m√ºmk√ºn\n          deƒüildir. 6.6. √úr√ºnleriniz tarafƒ±nƒ±za sevk irsaliyesi ile birlikte\n          g√∂nderilmektedir. Sevk irsaliyesinin arka tarafƒ±nda iade formu\n          bulunmaktadƒ±r. ƒ∞ade formunda iade etmek istediƒüiniz √ºr√ºnleri\n          barkodlarƒ± ve iade sebebiniz ile birlikte belirtmeniz gerekmektedir.\n          6.7. Kargo iade kodunuz irsaliyenin alt b√∂l√ºm√ºnde yer almaktadƒ±r.\n          √úr√ºn√ºn√ºz√º geri g√∂nderirken iade formu doldurulmu≈ü ≈üekilde, sevk\n          irsaliyesi kargo paketinin i√ßine konulmalƒ±dƒ±r. 6.8. Gelen √ºr√ºn\n          √∂ncelikle Micota tarafƒ±ndan incelenir. Yukarƒ±daki ≈üartlara uygun ise\n          iade i≈ülemi ba≈ülatƒ±lƒ±r. ƒ∞ade i≈ülemi onaylandƒ±ƒüƒ±nda alƒ±cƒ±ya ƒ∞ADE\n          TALEBƒ∞Nƒ∞Z ONAYLANMI≈ûTIR konulu mail g√∂nderilerek bilgilendirme\n          yapƒ±lƒ±r. Bu bilgilendirmeden sonra yasal s√ºre olan 14 g√ºn ( ond√∂rt )\n          i√ßerisinde √ºr√ºn √ºcreti kredi kartƒ±nƒ±za iade edilir. 6.9. Alƒ±cƒ± √ºr√ºn√º\n          isterse Micota maƒüazalarƒ±nda iade yapabilir. Maƒüazalardan yapƒ±lan iade\n          durumunda √ºr√ºn√ºn √ºcreti Micota Tekstil ve Hazƒ±r Giyim Sanayi\n          ƒ∞≈ületmeleri tarafƒ±ndan alƒ±cƒ±nƒ±n kredi kartƒ±na yasal s√ºre 10 i≈ü g√ºn√º\n          i√ßerisinde iade edilir. Alƒ±cƒ± isterse √ºr√ºn√ºn √ºcreti tutarƒ±nda iade\n          kartƒ± ( exchange card ) alabilir. ƒ∞ade kartƒ± t√ºm Micota maƒüazalarƒ±nda\n          ge√ßerlidir. 6.10. Alƒ±cƒ± satƒ±n aldƒ±ƒüƒ± √ºr√ºn√º, √ºr√ºn gammƒ± uygun olduƒüu\n          takdirde Micota maƒüazalarƒ±ndan deƒüi≈üim yapabilir. 6.11. Micota\n          kurulu≈ülarƒ±na ait maƒüazalardan alƒ±nan √ºr√ºnler Micota Online Shop‚Äôtan\n          deƒüi≈ütirilemez ve iade edilemez. 6.12.Online sayfamƒ±zda OUTLET\n          b√∂l√ºm√ºnden alƒ±nan √ºr√ºnlerin deƒüi≈üimi veya iadesi sadece MICOTA OUTLET\n          maƒüazalarƒ±mƒ±zdan yapƒ±labilir. Outlet √ºr√ºnlerimizin hediye paketlerine\n          outlet deƒüi≈ütirme kartƒ± konulmaktadƒ±r. 6.13.Online sayfamƒ±zda sezon\n          b√∂l√ºm√ºnden alƒ±nan √ºr√ºnlerin deƒüi≈üimi ve iadesi sadece sezon\n          maƒüazalarƒ±mƒ±zdan yapƒ±labilir.\n        </p>\n        <h4>7. CAYMA HAKKININ ƒ∞STƒ∞SNALARI</h4>\n        <p>\n          A≈üaƒüƒ±daki √ºr√ºnlerden herhangi birinin teslimatƒ±na ili≈ükin\n          s√∂zle≈ümelerde M√º≈üteri cayma hakkƒ±nƒ± kullanamaz: a) T√ºketicinin\n          istekleri veya ki≈üisel ihtiya√ßlarƒ± doƒürultusunda hazƒ±rlanan mallara\n          ili≈ükin s√∂zle≈ümeler. b) √áabuk bozulabilen veya son kullanma tarihi\n          ge√ßebilecek mallarƒ±n teslimine ili≈ükin s√∂zle≈ümeler. c) Tesliminden\n          sonra ambalaj, bant, m√ºh√ºr, paket gibi koruyucu unsurlarƒ± a√ßƒ±lmƒ±≈ü olan\n          mallardan; iadesi saƒülƒ±k ve hijyen a√ßƒ±sƒ±ndan uygun olmayanlarƒ±n\n          teslimine ili≈ükin s√∂zle≈ümeler. √ß) Tesliminden sonra ba≈üka √ºr√ºnlerle\n          karƒ±≈üan ve doƒüasƒ± gereƒüi ayrƒ±≈ütƒ±rƒ±lmasƒ± m√ºmk√ºn olmayan mallara ili≈ükin\n          s√∂zle≈ümeler. d) Malƒ±n tesliminden sonra ambalaj, bant, m√ºh√ºr, paket\n          gibi koruyucu unsurlarƒ± a√ßƒ±lmƒ±≈ü olmasƒ± halinde maddi ortamda sunulan\n          kitap, dijital i√ßerik ve bilgisayar sarf malzemelerine ili≈ükin\n          s√∂zle≈ümeler. h) Cayma hakkƒ± s√ºresi sona ermeden √∂nce, t√ºketicinin\n          onayƒ± ile ifasƒ±na ba≈ülanan hizmetlere ili≈ükin s√∂zle≈ümeler.\n        </p>\n        <h4>8. Dƒ∞ƒûER H√úK√úMLER</h4>\n        <p>\n          8.1. ƒ∞≈übu s√∂zle≈üme T√ºrk Hukuku kurallarƒ± √ßer√ßevesinde olu≈üturulmu≈ü\n          olup, ge√ßerliliƒüi ve baƒülayƒ±cƒ±lƒ±ƒüƒ± T√ºrk Hukuku kurallarƒ± √ßer√ßevesinde\n          olacaktƒ±r. ƒ∞≈übu s√∂zle≈ümenin uygulanmasƒ±ndan doƒüacak herhangi bir\n          ihtilafta ƒ∞stanbul ( Anadolu ) Mahkemeleri yetkili olacaktƒ±r. ≈ûikayet\n          ve itiraz konusunda ba≈üvurular T.C. G√ºmr√ºk ve Ticaret Bakanlƒ±ƒüƒ±n‚Äôca\n          her yƒ±l Aralƒ±k ayƒ±nda belirlenen parasal sƒ±nƒ±rlar d√¢hilinde T√ºketici\n          Hakem Heyetleri, a≈üan durumlarda ALICI'nƒ±n ve SATICI'nƒ±n yerle≈üim\n          yerindeki T√ºketici Mahkemeleri ve ƒ∞cra M√ºd√ºrl√ºkleri yetkilidir. 8.2.\n          Taraflarƒ±n, bu s√∂zle≈ümenin imzalandƒ±ƒüƒ± sƒ±rada belirttikleri adreslerin\n          deƒüi≈ümesi halinde yeni tebligat adreslerini adres deƒüi≈üikliƒüine\n          ili≈ükin olduƒüunu a√ßƒ±k√ßa bildirir iadeli taahh√ºtl√º mektup ile yazƒ±lƒ±\n          olarak bildirme y√ºk√ºml√ºl√ºƒü√º vardƒ±r. Aksi takdirde, eski adrese\n          yapƒ±lmƒ±≈ü tebligatlarƒ±n ge√ßerli olacaƒüƒ± kabul edilmi≈ü sayƒ±lacaktƒ±r.\n          8.3. ƒ∞≈übu s√∂zle≈ümede verilen bilgiler, kullanƒ±lan uzaktan ileti≈üim\n          ara√ßlarƒ±na uygun olarak ve iyiniyet ilkeleri √ßer√ßevesinde ergin\n          olmayanlar ile ayƒ±rtƒ±m g√ºc√ºnden yoksun veya kƒ±sƒ±tlƒ± erginleri\n          koruyacak ≈üekilde ticari ama√ßlarla verilmektedir\n        </p>\n        <h4>9. ALICI'NIN BEYANI</h4>\n        <p>\n          ALICI, s√∂zle≈üme konusu √ºr√ºn√ºn temel nitelikleri, satƒ±≈ü fiyatƒ± ve √∂deme\n          ≈üekli ile teslimata ili≈ükin t√ºm bilgiler de dahil olmak √ºzere i≈übu\n          s√∂zle≈ümede yer alan √ñn Bilgileri okuyup bilgi sahibi olduƒüunu ve\n          elektronik ortamda gerekli teyidi verdiƒüini beyan eder.\n        </p>\n        <h4>10. ƒ∞MZA YERƒ∞ VE TARƒ∞Hƒ∞</h4>\n        <p>\n          ƒ∞≈übu Mesafeli Satƒ±≈ü S√∂zle≈ümesi {today.toLocaleString(\"en-GB\")} tarih\n          ve saatinde elektronik ortamda akdedilmi≈ü olup bir n√ºshasƒ± elektronik\n          formatta Alƒ±cƒ±‚Äônƒ±n i≈übu s√∂zle≈ümenin 1. maddesinde belirtilen e-mail\n          adresine g√∂nderilmi≈ütir.\n        </p>\n      </div>\n    </Modal>\n  );\n}\n","import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getDiscountPrice } from \"../../helpers/product\";\r\nimport LayoutOne from \"../../layouts/LayoutOne\";\r\nimport { useAuthState } from \"../../auth/auth-context\";\r\n\r\nimport { anonymousLogin, socialLogin } from \"../../helpers/social-auth\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nimport \"./Checkout.css\";\r\n\r\nimport InvoiceModal from \"./InvoiceModal\";\r\nimport INSERT_ORDER from \"../../graphql/InsertOrder\";\r\nimport ContractModal from \"./ContractModal\";\r\nimport DistanceModal from \"./DistanceModal\";\r\nconst Checkout = ({ location, cartItems }) => {\r\n  const state = useAuthState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [addressType, setAddressType] = useState(\"shipping\");\r\n  const [invoiceAddressChecked, setInvoiceAddressChecked] = useState(false);\r\n  const [contractSigned, setContractSigned] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [contractModalShow, setContractModalShow] = useState(false);\r\n  const [distanceModalShow, setDistanceModalShow] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const [\r\n    insertOrder,\r\n    { loading: ordersLoading, error: ordersError },\r\n  ] = useMutation(INSERT_ORDER, {\r\n    onCompleted(ordersData) {\r\n      window.open(ordersData.OrderAction.paymentPageUrl, \"_self\");\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    const data = localStorage.getItem(\"invoiceAddressChecked\");\r\n    if (data) {\r\n      setInvoiceAddressChecked(JSON.parse(data));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"invoiceAddressChecked\", invoiceAddressChecked);\r\n  }, [invoiceAddressChecked]);\r\n\r\n  let cartTotalPrice = 0;\r\n\r\n  const handleModal = (e) => {\r\n    e.preventDefault();\r\n    if (e.target.id === \"shipping\") {\r\n      setAddressType(\"shipping\");\r\n    } else if (e.target.id === \"invoice\") {\r\n      setAddressType(\"invoice\");\r\n    }\r\n    setModalShow(true);\r\n  };\r\n\r\n  const handleOrder = () => {\r\n    insertOrder({\r\n      variables: {\r\n        notes: localStorage.getItem(\"notes\") || \"\",\r\n        isGift: localStorage.getItem(\"isGift\") || false,\r\n        addresses: state.invoiceAddress\r\n          ? [\r\n              {\r\n                city: state.invoiceAddress.il,\r\n                identity: state.invoiceAddress.identity || \"\",\r\n                name: state.invoiceAddress.name || \"\",\r\n                surname: state.invoiceAddress.surname || \"\",\r\n                street: state.invoiceAddress.firm\r\n                  ? state.invoiceAddress.firm +\r\n                    \" \" +\r\n                    state.invoiceAddress.street +\r\n                    \" VD:\" +\r\n                    state.invoiceAddress.vergid +\r\n                    \" VNo:\" +\r\n                    state.invoiceAddress.vergin\r\n                  : state.invoiceAddress.street,\r\n                town: state.invoiceAddress.il√ße,\r\n                isinvoiceAddress: true,\r\n              },\r\n              {\r\n                city: state.address.il,\r\n                identity: state.address.identity,\r\n                name: state.address.name,\r\n                surname: state.address.surname,\r\n                street: state.address.firm\r\n                  ? state.address.firm +\r\n                    \" VD:\" +\r\n                    state.address.vergid +\r\n                    \" VNo:\" +\r\n                    state.address.vergin +\r\n                    state.address.street\r\n                  : state.address.street,\r\n                town: state.address.il√ße,\r\n                isinvoiceAddress: false,\r\n              },\r\n            ]\r\n          : {\r\n              city: state.address.il,\r\n              identity: state.address.identity,\r\n              name: state.address.name,\r\n              surname: state.address.surname,\r\n              street: state.address.street,\r\n              town: state.address.il√ße,\r\n              isinvoiceAddress: true,\r\n            },\r\n        user_ordered: {\r\n          email: state.address.email,\r\n          name: state.address.name,\r\n          surname: state.address.surname,\r\n          phone: state.address.phone,\r\n          role: !state.user.isAnonymous ? \"USER\" : \"ANONYMOUS\",\r\n        },\r\n        order_items: cartItems.map((item) => ({\r\n          product_id: item.id,\r\n          qty: item.quantity,\r\n        })),\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSignin = async (e) => {\r\n    setLoading(true);\r\n    if (e.target.value) {\r\n      await socialLogin(e.target.value);\r\n      if (error) setError(error);\r\n    } else {\r\n      await anonymousLogin();\r\n      if (error) setError(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <LayoutOne headerTop='visible'>\r\n        {/* breadcrumb */}\r\n        <div className='checkout-area pt-95 pb-100'>\r\n          <div className='container'>\r\n            {cartItems && cartItems.length >= 1 ? (\r\n              <div className='row'>\r\n                {state.user ? (\r\n                  <div className='col-lg-7'>\r\n                    <div className='your-order-area'>\r\n                      <h3>Adres Bilgileri</h3>\r\n                      <div className='d-flex'>\r\n                        <label>Fatura Adresi Farklƒ±</label>\r\n                        <input\r\n                          className='checkbox'\r\n                          checked={invoiceAddressChecked}\r\n                          onChange={() =>\r\n                            setInvoiceAddressChecked(!invoiceAddressChecked)\r\n                          }\r\n                          type='checkbox'\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className={\r\n                          state.address\r\n                            ? \"your-order-wrap gray-bg-4 mb-4\"\r\n                            : \"your-order-wrap gray-bg-4 mb-4 errors\"\r\n                        }\r\n                      >\r\n                        <div className='your-order-product-info'>\r\n                          <div className='your-order-top'>\r\n                            <ul>\r\n                              <li>Teslimat Adresi</li>\r\n                              {state.address && (\r\n                                <li\r\n                                  className='edit'\r\n                                  id='shipping'\r\n                                  onClick={(e) => handleModal(e)}\r\n                                >\r\n                                  <i\r\n                                    id='shipping'\r\n                                    className='fa fa-lg fa-edit'\r\n                                  ></i>\r\n                                </li>\r\n                              )}\r\n                            </ul>\r\n                          </div>\r\n                          {state.address && (\r\n                            <>\r\n                              <div className='your-order-bottom'>\r\n                                {state.address.name}{\" \"}\r\n                                <span className='colortext'>|</span>{\" \"}\r\n                                {state.address.email}{\" \"}\r\n                                <span className='colortext'>|</span>{\" \"}\r\n                                {state.address.phone}\r\n                              </div>\r\n                              <div className='your-order-bottom'>\r\n                                {state.address.street}\r\n                                <p>\r\n                                  {state.address.il√ße}{\" \"}\r\n                                  <span className='colortext'>|</span>{\" \"}\r\n                                  {state.address.il}\r\n                                </p>\r\n                              </div>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n\r\n                        {!state.address && (\r\n                          <button\r\n                            type='button'\r\n                            className='submitAddress btn-block'\r\n                            id='shipping'\r\n                            onClick={(e) => handleModal(e)}\r\n                          >\r\n                            <i id='shipping' className='fa fa-lg fa-plus'></i>{\" \"}\r\n                            Teslimat Adresi Ekle\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n\r\n                      {invoiceAddressChecked && (\r\n                        <div className='your-order-wrap gray-bg-4'>\r\n                          <div className='your-order-product-info'>\r\n                            <div className='your-order-top'>\r\n                              <ul>\r\n                                <li>Fatura Adresi</li>\r\n                                {state.invoiceAddress && (\r\n                                  <li\r\n                                    className='edit'\r\n                                    id='invoice'\r\n                                    onClick={(e) => handleModal(e)}\r\n                                  >\r\n                                    <i\r\n                                      id='invoice'\r\n                                      className='fa fa-lg fa-edit'\r\n                                    ></i>\r\n                                  </li>\r\n                                )}\r\n                              </ul>\r\n                            </div>\r\n                            {state.invoiceAddress && (\r\n                              <>\r\n                                <div className='your-order-bottom'>\r\n                                  {state.invoiceAddress.name}{\" \"}\r\n                                  <span className='colortext'>|</span>{\" \"}\r\n                                  {state.invoiceAddress.email}{\" \"}\r\n                                  <span className='colortext'>|</span>{\" \"}\r\n                                  {state.invoiceAddress.phone}\r\n                                </div>\r\n                                <div className='your-order-bottom'>\r\n                                  {state.invoiceAddress.street}\r\n                                  <p>\r\n                                    {state.invoiceAddress.il√ße}{\" \"}\r\n                                    <span className='colortext'>|</span>{\" \"}\r\n                                    {state.invoiceAddress.il}\r\n                                  </p>\r\n                                </div>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n\r\n                          {!state.invoiceAddress && (\r\n                            <button\r\n                              type='button'\r\n                              className='submitAddress btn-block'\r\n                              id='invoice'\r\n                              onClick={(e) => handleModal(e)}\r\n                            >\r\n                              <i id='invoice' className='fa fa-lg fa-plus'></i>{\" \"}\r\n                              Fatura Adresi Ekle\r\n                            </button>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div\r\n                    className='col-lg-7 text-center border d-flex justify-content-center'\r\n                    id='dimmed'\r\n                  >\r\n                    <div className='col-lg-7 '>\r\n                      <div\r\n                        id='cover-spin'\r\n                        className={loading ? \"d-block\" : \"\"}\r\n                      ></div>\r\n                      <div className='your-order-area'>\r\n                        <div className='item-empty-area__text boxtext'>\r\n                          Not: √úye olmadan da kargolarƒ±nƒ±zƒ± takip edebilirsiniz\r\n                        </div>\r\n                        <div className='place-order mt-25 '>\r\n                          <button\r\n                            className='btn-hover'\r\n                            onClick={(e) => handleSignin(e)}\r\n                          >\r\n                            √úYE OLMADAN DEVAM ET\r\n                          </button>\r\n                        </div>\r\n                        <div className='place-order mt-25'>\r\n                          <button\r\n                            className='btn-hover'\r\n                            onClick={() => {\r\n                              history.push(\"/login-register\");\r\n                            }}\r\n                          >\r\n                            √úYE OL | Gƒ∞Rƒ∞≈û YAP\r\n                          </button>\r\n                        </div>\r\n\r\n                        <hr />\r\n                        <div className='place-order mt-25'>\r\n                          <button\r\n                            className='btn-hover'\r\n                            value='t'\r\n                            onClick={(e) => handleSignin(e)}\r\n                          >\r\n                            {\" \"}\r\n                            <i className='fa fa-twitter'></i> TwItter Hesabƒ±nla\r\n                            Giri≈ü Yap\r\n                          </button>\r\n                        </div>\r\n                        <div className='place-order mt-25'>\r\n                          <button\r\n                            className='btn-hover'\r\n                            value='g'\r\n                            onClick={(e) => handleSignin(e)}\r\n                          >\r\n                            <i className='fa fa-google'></i> Google Hesabƒ±nla\r\n                            Giri≈ü Yap\r\n                          </button>\r\n                        </div>\r\n                        <div className='place-order mt-25'>\r\n                          <button\r\n                            className='btn-hover'\r\n                            value='f'\r\n                            onClick={(e) => handleSignin(e)}\r\n                          >\r\n                            <i className='fa fa-facebook'></i> Facebook\r\n                            Hesabƒ±nla Giri≈ü Yap\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className='col-lg-5'>\r\n                  <div className='your-order-area'>\r\n                    <h3>Sipari≈üiniz</h3>\r\n                    <div className='your-order-wrap gray-bg-4'>\r\n                      <div className='your-order-product-info'>\r\n                        <div className='your-order-top'>\r\n                          <ul>\r\n                            <li>√úr√ºn</li>\r\n                            <li>Toplam</li>\r\n                          </ul>\r\n                        </div>\r\n                        <div className='your-order-middle'>\r\n                          <ul>\r\n                            {cartItems.map((cartItem, key) => {\r\n                              const discountedPrice = getDiscountPrice(\r\n                                cartItem.price,\r\n                                cartItem.discount\r\n                              );\r\n                              const finalProductPrice = cartItem.price.toFixed(\r\n                                2\r\n                              );\r\n                              const finalDiscountedPrice = discountedPrice.toFixed(\r\n                                2\r\n                              );\r\n\r\n                              discountedPrice != null\r\n                                ? (cartTotalPrice +=\r\n                                    finalDiscountedPrice * cartItem.quantity)\r\n                                : (cartTotalPrice +=\r\n                                    finalProductPrice * cartItem.quantity);\r\n                              return (\r\n                                <li key={key}>\r\n                                  <span className='order-middle-left'>\r\n                                    {cartItem.name} X {cartItem.quantity}\r\n                                  </span>{\" \"}\r\n                                  <span className='order-price'>\r\n                                    <strong>\r\n                                      {discountedPrice !== null\r\n                                        ? (\r\n                                            finalDiscountedPrice *\r\n                                            cartItem.quantity\r\n                                          ).toFixed(2) + \" TL\"\r\n                                        : (\r\n                                            finalProductPrice *\r\n                                            cartItem.quantity\r\n                                          ).toFixed(2) + \" TL\"}\r\n                                    </strong>\r\n                                  </span>\r\n                                </li>\r\n                              );\r\n                            })}\r\n                          </ul>\r\n                        </div>\r\n                        <div className='your-order-bottom'>\r\n                          <ul>\r\n                            <li className='your-order-shipping'>Kargo</li>\r\n                            <li>\r\n                              <strong>\r\n                                {cartTotalPrice.toFixed(2) < 150\r\n                                  ? \"10 TL\"\r\n                                  : \"√úcretsiz\"}\r\n                              </strong>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                        <div className='your-order-total'>\r\n                          <ul>\r\n                            <li className='order-total'>Toplam</li>\r\n                            <li>\r\n                              <strong>\r\n                                {cartTotalPrice.toFixed(2) < 150\r\n                                  ? (cartTotalPrice + 10).toFixed(2) + \" TL\"\r\n                                  : cartTotalPrice.toFixed(2) + \" TL\"}\r\n                              </strong>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className={\r\n                        contractSigned ? \"mt-3 d-flex\" : \"mt-3 d-flex errors\"\r\n                      }\r\n                    >\r\n                      <input\r\n                        className='checkbox'\r\n                        checked={contractSigned}\r\n                        onChange={() => setContractSigned(!contractSigned)}\r\n                        type='checkbox'\r\n                      />\r\n                      {/* eslint-disable-next-line */}\r\n                      <a>\r\n                        <u onClick={() => setContractModalShow(true)}>\r\n                          √ñn Bƒ∞lgilendirme Ko≈üullarƒ±\r\n                        </u>\r\n                        'nƒ± ve{\" \"}\r\n                        <u onClick={() => setDistanceModalShow(true)}>\r\n                          {\" \"}\r\n                          Mesafeli Satƒ±≈ü S√∂zle≈ümesi\r\n                        </u>\r\n                        'ni okudum ve kabul ediyorum\r\n                      </a>\r\n                    </div>\r\n\r\n                    <div className='place-order mt-2'>\r\n                      <button\r\n                        type='submit'\r\n                        className={\r\n                          !state.address || !contractSigned\r\n                            ? \"btn-hover noButton\"\r\n                            : \"btn-hover\"\r\n                        }\r\n                        onClick={handleOrder}\r\n                        disabled={!state.address || !contractSigned}\r\n                        data-toggle='tooltip'\r\n                        data-placement='bottom'\r\n                        title={\r\n                          !state.user \r\n                            ? \"Giri≈ü Yap\"\r\n                            : !state.address\r\n                            ? \"Adres bilgilerini giriniz.\"\r\n                            : !contractSigned\r\n                            ? \"√ñn bilgilerndirme ko≈üullarƒ±nƒ± ve mesafeli satƒ±≈ü s√∂zle≈ümesini onaylayƒ±nƒ±z.\"\r\n                            : null\r\n                        }\r\n                      >\r\n                        {ordersLoading ? (\r\n                          <span\r\n                            className='spinner-border spinner-border-sm'\r\n                            role='status'\r\n                            aria-hidden='true'\r\n                          ></span>\r\n                        ) : (\r\n                          \"iyzico ile √ñde\"\r\n                        )}\r\n                      </button>\r\n                    </div>\r\n                    {ordersError && (\r\n                      <span>Bir hata olu≈ütu, l√ºtfen tekrar deneyin.</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className='row'>\r\n                <div className='col-lg-12'>\r\n                  <div className='item-empty-area text-center'>\r\n                    <div className='item-empty-area__icon mb-30'>\r\n                      <i className='pe-7s-cash'></i>\r\n                    </div>\r\n                    <div className='item-empty-area__text'>\r\n                      Sepette √ºr√ºn yok. <br />{\" \"}\r\n                      <Link to={process.env.PUBLIC_URL + \"/shop\"}>\r\n                        Alƒ±≈üveri≈üe Ba≈üla\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </LayoutOne>\r\n      <InvoiceModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        addressType={addressType}\r\n      />\r\n      <ContractModal\r\n        show={contractModalShow}\r\n        onHide={() => setContractModalShow(false)}\r\n        cartItems={cartItems}\r\n      />\r\n      <DistanceModal\r\n        show={distanceModalShow}\r\n        onHide={() => setDistanceModalShow(false)}\r\n        cartItems={cartItems}\r\n        address={state.address}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCheckout.propTypes = {\r\n  cartItems: PropTypes.array,\r\n  location: PropTypes.object,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cartItems: state.cartData,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}