{"version":3,"sources":["../node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","ref","field","handleChange","isRadioOrCheckbox","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","isUndefined","val","undefined","get","obj","defaultValue","split","filter","Boolean","focusOnErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","forEach","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","baseUnset","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","option","disconnect","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","files","selected","isString","getFieldsValues","search","output","startsWith","find","nest","isSameError","error","types","message","objectA","objectB","objectAKeys","objectBKeys","every","compareObject","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isFunction","isBoolean","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","a","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","isPrimitive","getPath$1","parentPath","getPath","getInnerPath","pathWithIndex","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isRadioOrCheckboxFunction","useForm","reValidateMode","validationContext","defaultValues","submitFocusError","validateCriteriaMode","useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","useState","render","isWindowUndefined","shouldValidateSchemaOrResolver","isWeb","isProxyEnabled","Proxy","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldDirty","isFieldArray","previousDirtyFieldsLength","size","fieldArrayName","isDirtyChanged","setInternalValues","parentFieldName","isValueArray","setInternalValue","executeValidation","skipReRender","executeSchemaOrResolverValidation","payload","previousFormIsValid","triggerValidation","Promise","all","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isArrayValue","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","validateSchemaOrResolver","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","setError","watch","fieldNames","isDefaultValueUndefined","combinedDefaultValues","unregister","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","getValues","outputValues","useEffect","formState","commonProps","prop","control","validateSchemaIsValid","createContext"],"mappings":"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","file":"static/js/3.0fea2a19.chunk.js","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement, Fragment } from 'react';\n\nvar isNullOrUndefined = (value) => value == null;\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst SELECT = 'select';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\r\nconst REGEX_ARRAY_FIELD_INDEX = /[\\d+]/g;\n\nfunction attachEventListeners({ field: { ref }, handleChange, isRadioOrCheckbox, }) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (isArray(objectRef) &&\r\n                        !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\r\n                            .length)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach((path) => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    const fieldValue = fields[name];\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.filter(Boolean).forEach((option, index) => {\r\n                const { ref, mutationWatcher } = option;\r\n                if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldValue, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : isArray(search)\r\n                    ? search.find((data) => name.startsWith(data))\r\n                    : search && search.nest)) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAKeys = Object.keys(objectA);\r\n    const objectBKeys = Object.keys(objectB);\r\n    return (objectAKeys.length === objectBKeys.length &&\r\n        objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key]));\r\n};\n\nvar isSameError = (error, { type, types, message }) => isObject(error) &&\r\n    error.type === type &&\r\n    error.message === message &&\r\n    compareObject(error.types, types);\n\nfunction shouldRenderBasedOnError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (validateAllFieldCriteria) {\r\n        const error = errors[name];\r\n        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n    }\r\n    return {};\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    var _a;\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? (_a = fields[name].options) === null || _a === void 0 ? void 0 : _a[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (path\r\n        ? previous[path] && validateAllFieldCriteria\r\n            ? {\r\n                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n            }\r\n            : {\r\n                [path]: previous[path] || Object.assign({ message,\r\n                    type }, (validateAllFieldCriteria\r\n                    ? {\r\n                        types: { [type]: message || true },\r\n                    }\r\n                    : {})),\r\n            }\r\n        : {}))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => getPath(parentPath, value).flat(Infinity);\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateSchemaOrResolver = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    validationContextRef.current = validationContext;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldRenderBasedOnError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateSchemaOrResolver) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            const previousError = get(errorsRef.current, name);\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    (previousError\r\n                        ? !isSameError(previousError, error[name])\r\n                        : true);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !isNullOrUndefined(shouldRender)) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateSchemaOrResolver]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const { ref, options } = field;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isString(value)) {\r\n                ref.value = value;\r\n            }\r\n            else {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, [isWeb]);\r\n    const setDirty = useCallback((name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        let isFieldDirty = defaultValuesAtRenderRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        if (isFieldArray) {\r\n            const fieldArrayName = getFieldArrayParentName(name);\r\n            isFieldDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isFieldDirty;\r\n        if (isFieldDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray\r\n            ? isFieldDirty\r\n            : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    }, []);\r\n    const setInternalValues = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            const field = fieldsRef.current[fieldName];\r\n            if (isObject(value[key])) {\r\n                setInternalValues(name, value[key], fieldName);\r\n            }\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirty(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirty]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirty(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value);\r\n        }\r\n    }, [setDirty, setFieldValue, setInternalValues]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            shouldRenderBaseOnError(name, error, skipReRender ? null : false);\r\n            return isEmptyObject(error);\r\n        }\r\n        return false;\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach((name) => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const error = get(errors, payload);\r\n            shouldRenderBaseOnError(payload, (error ? { [payload]: error } : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateSchemaOrResolver) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaOrResolverValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isArrayValue = isArray(names);\r\n        (isArrayValue\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isArrayValue\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isArrayValue) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isArrayValue && valueOrShouldValidate)) {\r\n            triggerValidation(isArrayValue ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldRender = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldRender = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldRender && reRender();\r\n            }\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldRender = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldRender) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaOrResolver = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        if (handleChangeRef.current && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultValuesAtRenderRef.current = unset(defaultValuesAtRenderRef.current, [name]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach((data) => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateSchemaOrResolver) {\r\n                validateSchemaOrResolver();\r\n            }\r\n        }\r\n    }, [\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        validateSchemaOrResolver,\r\n        removeFieldEventListener,\r\n    ]);\r\n    function clearError(name) {\r\n        if (name) {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        else {\r\n            errorsRef.current = {};\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, shouldRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(get(errorsRef.current, name), {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (shouldRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })), { shouldRender: true }));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach((error) => setInternalError(Object.assign({}, error)));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const watchFields = watchFieldsRef.current;\r\n        const isDefaultValueUndefined = isUndefined(defaultValue);\r\n        const combinedDefaultValues = isDefaultValueUndefined\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isDefaultValueUndefined\r\n                ? get(combinedDefaultValues, fieldNames)\r\n                : defaultValue, true);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(name) {\r\n        if (fieldsRef.current) {\r\n            (isArray(name) ? name : [name]).forEach((fieldName) => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? field &&\r\n                isArray(field.options) &&\r\n                field.options.filter(Boolean).find((option) => {\r\n                    return value === option.ref.value && option.ref === ref;\r\n                })\r\n            : field && ref === field.ref) {\r\n            fields[name] = Object.assign(Object.assign({}, field), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(field));\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), { mutationWatcher });\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = get(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(field, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateSchemaOrResolver &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaOrResolver();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, field).then((error) => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    isEmptyObject(error)\r\n                        ? validFieldsRef.current.add(name)\r\n                        : (isValidRef.current = false);\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, field.ref) : defaultValue;\r\n        }\r\n        if (type) {\r\n            attachEventListeners({\r\n                field: isRadioOrCheckbox && field.options\r\n                    ? field.options[field.options.length - 1]\r\n                    : field,\r\n                isRadioOrCheckbox: isRadioOrCheckbox || isSelectInput(ref),\r\n                handleChange: handleChangeRef.current,\r\n            });\r\n        }\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        const fields = fieldsRef.current;\r\n        let fieldValues = getFieldsValues(fields);\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateSchemaOrResolver) {\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                reRender();\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                errorsRef.current = fieldErrors;\r\n                if (submitFocusError && isWeb) {\r\n                    focusOnErrorField(fields, fieldErrors);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateSchemaOrResolver,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!dirtyFields) {\r\n            dirtyFieldsRef.current = new Set();\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValues.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return fieldsRef.current[payload]\r\n                ? getFieldValue(fieldsRef.current, fieldsRef.current[payload].ref)\r\n                : get(defaultValuesRef.current, payload);\r\n        }\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    }\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateSchemaOrResolver) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const commonProps = {\r\n        triggerValidation,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultValuesAtRenderRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        getValues: useCallback(getValues, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ removeFieldEventListener,\r\n        reRender }, (shouldValidateSchemaOrResolver\r\n        ? { validateSchemaIsValid: validateSchemaOrResolver }\r\n        : {})), { mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        isWatchAllRef,\r\n        watchFieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef }), commonProps);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearError: useCallback(clearError, []), setError: useCallback(setError, []), errors: errorsRef.current }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nvar getSortRemovedItems = (indexes, removeIndexes, updatedIndexes = [], count = 0, notFoundIndexes = []) => {\r\n    for (const removeIndex of removeIndexes) {\r\n        if (indexes.indexOf(removeIndex) < 0) {\r\n            notFoundIndexes.push(removeIndex);\r\n        }\r\n    }\r\n    for (const index of indexes.sort()) {\r\n        if (removeIndexes.indexOf(index) > -1) {\r\n            updatedIndexes.push(-1);\r\n            count++;\r\n        }\r\n        else {\r\n            updatedIndexes.push(index -\r\n                count -\r\n                (notFoundIndexes.length\r\n                    ? notFoundIndexes\r\n                        .map((notFoundIndex) => notFoundIndex < index)\r\n                        .filter(Boolean).length\r\n                    : 0));\r\n        }\r\n    }\r\n    return updatedIndexes;\r\n};\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(isArray(value) ? value : [value || null]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(isArray(value) ? value : [value || null]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : null;\n\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { isWatchAllRef, resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const getDefaultValues = () => [\r\n        ...get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\r\n            ? fieldArrayDefaultValues.current\r\n            : defaultValuesRef.current, name, []),\r\n    ];\r\n    const memoizedDefaultValues = useRef(getDefaultValues());\r\n    const [fields, setField] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState(false);\r\n    const allFields = useRef(fields);\r\n    const isNameKey = isKey(name);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (values) => values.map((value) => appendId(value, keyName));\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const modifyDirtyFields = ({ shouldRender, isRemove, isPrePend, index, value = {}, } = {}) => {\r\n        let render = shouldRender;\r\n        const values = isArray(value) ? value : [value];\r\n        if (readFormStateRef.current.dirty) {\r\n            const dirtyFieldIndexesAndValues = {};\r\n            if (isPrePend || isRemove) {\r\n                for (const dirtyField of [...dirtyFieldsRef.current].sort()) {\r\n                    if (isMatchFieldArrayName(dirtyField, name)) {\r\n                        const matchedIndexes = dirtyField.match(REGEX_ARRAY_FIELD_INDEX);\r\n                        if (matchedIndexes) {\r\n                            const matchIndex = +matchedIndexes[matchedIndexes.length - 1];\r\n                            if (dirtyFieldIndexesAndValues[matchIndex]) {\r\n                                dirtyFieldIndexesAndValues[matchIndex].push(dirtyField);\r\n                            }\r\n                            else {\r\n                                dirtyFieldIndexesAndValues[matchIndex] = [dirtyField];\r\n                            }\r\n                        }\r\n                        dirtyFieldsRef.current.delete(dirtyField);\r\n                    }\r\n                }\r\n            }\r\n            if (!isUndefined(index) || isPrePend) {\r\n                const updatedDirtyFieldIndexes = isUndefined(index)\r\n                    ? []\r\n                    : getSortRemovedItems(Object.keys(dirtyFieldIndexesAndValues).map((i) => +i), isArray(index) ? index : [index]);\r\n                Object.values(dirtyFieldIndexesAndValues).forEach((values, index) => {\r\n                    const updateIndex = isPrePend ? 0 : updatedDirtyFieldIndexes[index];\r\n                    if (updateIndex > -1) {\r\n                        for (const value of values) {\r\n                            const matchedIndexes = value.match(REGEX_ARRAY_FIELD_INDEX);\r\n                            if (matchedIndexes) {\r\n                                dirtyFieldsRef.current.add(value.replace(/[\\d+]([^[\\d+]+)$/, `${isPrePend\r\n                                    ? +matchedIndexes[matchedIndexes.length - 1] +\r\n                                        values.length\r\n                                    : updateIndex}$1`));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (!isRemove) {\r\n                values.forEach((fieldValue, index) => Object.keys(fieldValue).forEach((key) => dirtyFieldsRef.current.add(`${name}[${isPrePend ? index : allFields.current.length + index}].${key}`)));\r\n                isDirtyRef.current = true;\r\n            }\r\n            render = true;\r\n        }\r\n        if (render && !isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name] || []);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = get(getValues({ nest: true }), name);\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        setFieldAndValidState([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n        modifyDirtyFields({ value });\r\n    };\r\n    const prepend$1 = (value) => {\r\n        let shouldRender = false;\r\n        resetFields();\r\n        setFieldAndValidState(prepend(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prepend(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            shouldRender = true;\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isPrePend: true,\r\n            value,\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        const isIndexUndefined = isUndefined(index);\r\n        if (!isIndexUndefined) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifyDirtyFields({\r\n            shouldRender,\r\n            isRemove: true,\r\n            index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insert(getFieldValueByName(fieldsRef.current, name), index));\r\n        setFieldAndValidState(insert(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insert(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        setFieldAndValidState([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = getDefaultValues();\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fieldArrayDefaultValues.current[name] &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect(() => {\r\n        if (isWatchAllRef && isWatchAllRef.current) {\r\n            reRender();\r\n        }\r\n        else if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [fields, name, reRender, watchFieldsRef, isWatchAllRef]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [fields, name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, touchedFieldsRef, readFormStateRef, reRender, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const rulesRef = useRef(rules);\r\n    const onFocusRef = useRef(onFocus);\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    rulesRef.current = rules;\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = useCallback(() => {\r\n        if (!isNotFieldArray) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), rulesRef.current);\r\n    }, [\r\n        isNotFieldArray,\r\n        fieldsRef,\r\n        rulesRef,\r\n        name,\r\n        onFocusRef,\r\n        register,\r\n        removeFieldEventListener,\r\n    ]);\r\n    useEffect(() => () => {\r\n        !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\r\n    }, [unregister, name, fieldArrayNamesRef]);\r\n    useEffect(() => {\r\n        registerField();\r\n    }, [registerField]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    useEffect(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            if (isNotFieldArray) {\r\n                setInputStateValue(isUndefined(defaultValue)\r\n                    ? get(defaultValuesRef.current, name)\r\n                    : defaultValue);\r\n            }\r\n        }\r\n    });\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), { [onBlurName]: (...args) => {\r\n            if (onBlur) {\r\n                onBlur(args);\r\n            }\r\n            if (readFormStateRef.current.touched &&\r\n                !get(touchedFieldsRef.current, name)) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                reRender();\r\n            }\r\n            if (shouldReValidateOnBlur) {\r\n                triggerValidation(name);\r\n            }\r\n        } }), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"],"sourceRoot":""}